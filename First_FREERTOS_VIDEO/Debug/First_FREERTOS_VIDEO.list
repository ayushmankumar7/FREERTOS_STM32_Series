
First_FREERTOS_VIDEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005764  08005764  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005768  08005768  00006768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800576c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000070  080057dc  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b80  080057dc  00007b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a37  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e27  00000000  00000000  00019ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dde  00000000  00000000  0001db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043f2  00000000  00000000  0001e8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d09  00000000  00000000  00022ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972d2  00000000  00000000  000349e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbcbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  000cbd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d1048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800564c 	.word	0x0800564c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800564c 	.word	0x0800564c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 faba 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f824 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f882 	bl	8000710 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060c:	f001 fb00 	bl	8001c10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tempCheckTask */
  tempCheckTaskHandle = osThreadNew(StartTempCheckTask, NULL, &tempCheckTask_attributes);
 8000610:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <main+0x3c>)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <main+0x40>)
 8000616:	f001 fb45 	bl	8001ca4 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <main+0x44>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of fanControlTask */
  fanControlTaskHandle = osThreadNew(StartFanControl, NULL, &fanControlTask_attributes);
 8000620:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <main+0x48>)
 8000622:	2100      	movs	r1, #0
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <main+0x4c>)
 8000626:	f001 fb3d 	bl	8001ca4 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <main+0x50>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f001 fb12 	bl	8001c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x38>
 8000638:	080056c8 	.word	0x080056c8
 800063c:	08000761 	.word	0x08000761
 8000640:	2000008c 	.word	0x2000008c
 8000644:	080056ec 	.word	0x080056ec
 8000648:	0800079d 	.word	0x0800079d
 800064c:	20000090 	.word	0x20000090

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fa64 	bl	8004b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a22      	ldr	r2, [pc, #136]	@ (8000708 <SystemClock_Config+0xb8>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <SystemClock_Config+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <SystemClock_Config+0xbc>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fb7b 	bl	8000dc0 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f89d 	bl	800080e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fdde 	bl	80012b0 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006fa:	f000 f888 	bl	800080e <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <MX_GPIO_Init+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <MX_GPIO_Init+0x4c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_GPIO_Init+0x4c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <StartTempCheckTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTempCheckTask */
void StartTempCheckTask(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  currentTemp = (currentTemp < 35) ? currentTemp + 1 : 25;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <StartTempCheckTask+0x34>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b22      	cmp	r3, #34	@ 0x22
 800076e:	dc03      	bgt.n	8000778 <StartTempCheckTask+0x18>
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <StartTempCheckTask+0x34>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	e000      	b.n	800077a <StartTempCheckTask+0x1a>
 8000778:	2319      	movs	r3, #25
 800077a:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <StartTempCheckTask+0x34>)
 800077c:	6013      	str	r3, [r2, #0]
	  printf("[Sensor Reading]: %d \n\r", currentTemp);
 800077e:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <StartTempCheckTask+0x34>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <StartTempCheckTask+0x38>)
 8000786:	f004 f889 	bl	800489c <iprintf>
	  osDelay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f001 fb1b 	bl	8001dc8 <osDelay>
	  currentTemp = (currentTemp < 35) ? currentTemp + 1 : 25;
 8000792:	e7e9      	b.n	8000768 <StartTempCheckTask+0x8>
 8000794:	20000000 	.word	0x20000000
 8000798:	08005684 	.word	0x08005684

0800079c <StartFanControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFanControl */
void StartFanControl(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFanControl */
  /* Infinite loop */
  for(;;)
  {
	  if (currentTemp < 30 ){
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <StartFanControl+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b1d      	cmp	r3, #29
 80007aa:	dc03      	bgt.n	80007b4 <StartFanControl+0x18>
		  printf("FAN OFF \n");
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <StartFanControl+0x2c>)
 80007ae:	f004 f8dd 	bl	800496c <puts>
 80007b2:	e002      	b.n	80007ba <StartFanControl+0x1e>
	  }
	  else{
		  printf("FAN ON \n");
 80007b4:	4805      	ldr	r0, [pc, #20]	@ (80007cc <StartFanControl+0x30>)
 80007b6:	f004 f8d9 	bl	800496c <puts>
	  }
    osDelay(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007be:	f001 fb03 	bl	8001dc8 <osDelay>
	  if (currentTemp < 30 ){
 80007c2:	e7ef      	b.n	80007a4 <StartFanControl+0x8>
 80007c4:	20000000 	.word	0x20000000
 80007c8:	0800569c 	.word	0x0800569c
 80007cc:	080056a8 	.word	0x080056a8

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007e2:	f000 f9eb 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40000800 	.word	0x40000800

080007f4 <__io_putchar>:

int __io_putchar(int ch)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fed4 	bl	80005ac <ITM_SendChar>
 return(ch);
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000830:	6453      	str	r3, [r2, #68]	@ 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fa83 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	@ 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b33      	ldr	r3, [pc, #204]	@ (8000958 <HAL_InitTick+0xe4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a32      	ldr	r2, [pc, #200]	@ (8000958 <HAL_InitTick+0xe4>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <HAL_InitTick+0xe4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fecc 	bl	8001648 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ba:	f000 feb1 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80008be:	6378      	str	r0, [r7, #52]	@ 0x34
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c2:	f000 fead 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80008c6:	4603      	mov	r3, r0
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ce:	4a23      	ldr	r2, [pc, #140]	@ (800095c <HAL_InitTick+0xe8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <HAL_InitTick+0xec>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	@ (8000964 <HAL_InitTick+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <HAL_InitTick+0xec>)
 80008e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <HAL_InitTick+0xec>)
 80008ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ec:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_InitTick+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_InitTick+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_InitTick+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <HAL_InitTick+0xec>)
 8000902:	f000 fed3 	bl	80016ac <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <HAL_InitTick+0xec>)
 8000916:	f000 ff23 	bl	8001760 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000928:	201e      	movs	r0, #30
 800092a:	f000 fa3b 	bl	8000da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	201e      	movs	r0, #30
 800093a:	f000 fa17 	bl	8000d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_InitTick+0xf4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000950:	4618      	mov	r0, r3
 8000952:	3738      	adds	r7, #56	@ 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000094 	.word	0x20000094
 8000964:	40000800 	.word	0x40000800
 8000968:	20000008 	.word	0x20000008

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <TIM4_IRQHandler+0x10>)
 80009aa:	f000 ff3b 	bl	8001824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000094 	.word	0x20000094

080009b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
  }

  return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fef1 	bl	80007f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
  }
  return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a52:	605a      	str	r2, [r3, #4]
  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f004 f880 	bl	8004bc8 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20018000 	.word	0x20018000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200000dc 	.word	0x200000dc
 8000afc:	20004b80 	.word	0x20004b80

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b28:	f7ff ffea 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f004 f83f 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fd51 	bl	80005fc <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b68:	0800576c 	.word	0x0800576c
  ldr r2, =_sbss
 8000b6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b70:	20004b80 	.word	0x20004b80

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <HAL_Init+0x40>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_Init+0x40>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <HAL_Init+0x40>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f8d8 	bl	8000d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f7ff fe64 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fe36 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	200000e0 	.word	0x200000e0

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000e0 	.word	0x200000e0

08000bfc <__NVIC_SetPriorityGrouping>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4c 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7e:	f7ff ff61 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ffb1 	bl	8000cf0 <NVIC_EncodePriority>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff80 	bl	8000c9c <__NVIC_SetPriority>
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff54 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e267      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d075      	beq.n	8000eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000dde:	4b88      	ldr	r3, [pc, #544]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d00c      	beq.n	8000e04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dea:	4b85      	ldr	r3, [pc, #532]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d112      	bne.n	8000e1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df6:	4b82      	ldr	r3, [pc, #520]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e02:	d10b      	bne.n	8000e1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	4b7e      	ldr	r3, [pc, #504]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d05b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x108>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d157      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e242      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e24:	d106      	bne.n	8000e34 <HAL_RCC_OscConfig+0x74>
 8000e26:	4b76      	ldr	r3, [pc, #472]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a75      	ldr	r2, [pc, #468]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e01d      	b.n	8000e70 <HAL_RCC_OscConfig+0xb0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x98>
 8000e3e:	4b70      	ldr	r3, [pc, #448]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6f      	ldr	r2, [pc, #444]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0xb0>
 8000e58:	4b69      	ldr	r3, [pc, #420]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a68      	ldr	r2, [pc, #416]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b66      	ldr	r3, [pc, #408]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a65      	ldr	r2, [pc, #404]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff feb4 	bl	8000be4 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff feb0 	bl	8000be4 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	@ 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e207      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	4b5b      	ldr	r3, [pc, #364]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0xc0>
 8000e9e:	e014      	b.n	8000eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fea0 	bl	8000be4 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fe9c 	bl	8000be4 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	@ 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e1f3      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b51      	ldr	r3, [pc, #324]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0xe8>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d063      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee2:	4b47      	ldr	r3, [pc, #284]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d11c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eee:	4b44      	ldr	r3, [pc, #272]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	4b41      	ldr	r3, [pc, #260]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <HAL_RCC_OscConfig+0x152>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1c7      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4937      	ldr	r1, [pc, #220]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e03a      	b.n	8000f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d020      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f30:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <HAL_RCC_OscConfig+0x244>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fe55 	bl	8000be4 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fe51 	bl	8000be4 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1a8      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4925      	ldr	r1, [pc, #148]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e015      	b.n	8000f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <HAL_RCC_OscConfig+0x244>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fe34 	bl	8000be4 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fe30 	bl	8000be4 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e187      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d036      	beq.n	8001018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_RCC_OscConfig+0x248>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fe14 	bl	8000be4 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fe10 	bl	8000be4 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e167      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x200>
 8000fde:	e01b      	b.n	8001018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <HAL_RCC_OscConfig+0x248>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fdfd 	bl	8000be4 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fec:	e00e      	b.n	800100c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff fdf9 	bl	8000be4 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d907      	bls.n	800100c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e150      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
 8001000:	40023800 	.word	0x40023800
 8001004:	42470000 	.word	0x42470000
 8001008:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	4b88      	ldr	r3, [pc, #544]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800100e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1ea      	bne.n	8000fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 8097 	beq.w	8001154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b81      	ldr	r3, [pc, #516]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b7d      	ldr	r3, [pc, #500]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a7c      	ldr	r2, [pc, #496]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b7a      	ldr	r3, [pc, #488]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b77      	ldr	r3, [pc, #476]	@ (8001234 <HAL_RCC_OscConfig+0x474>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b74      	ldr	r3, [pc, #464]	@ (8001234 <HAL_RCC_OscConfig+0x474>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a73      	ldr	r2, [pc, #460]	@ (8001234 <HAL_RCC_OscConfig+0x474>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106e:	f7ff fdb9 	bl	8000be4 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001076:	f7ff fdb5 	bl	8000be4 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e10c      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	4b6a      	ldr	r3, [pc, #424]	@ (8001234 <HAL_RCC_OscConfig+0x474>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x2ea>
 800109c:	4b64      	ldr	r3, [pc, #400]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800109e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a0:	4a63      	ldr	r2, [pc, #396]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010a8:	e01c      	b.n	80010e4 <HAL_RCC_OscConfig+0x324>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x30c>
 80010b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80010be:	4b5c      	ldr	r3, [pc, #368]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0x324>
 80010cc:	4b58      	ldr	r3, [pc, #352]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010d0:	4a57      	ldr	r2, [pc, #348]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010d8:	4b55      	ldr	r3, [pc, #340]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010dc:	4a54      	ldr	r2, [pc, #336]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80010de:	f023 0304 	bic.w	r3, r3, #4
 80010e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d015      	beq.n	8001118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff fd7a 	bl	8000be4 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f2:	e00a      	b.n	800110a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f4:	f7ff fd76 	bl	8000be4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0cb      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110a:	4b49      	ldr	r3, [pc, #292]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800110c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0ee      	beq.n	80010f4 <HAL_RCC_OscConfig+0x334>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fd64 	bl	8000be4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111e:	e00a      	b.n	8001136 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fd60 	bl	8000be4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800112e:	4293      	cmp	r3, r2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e0b5      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001136:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1ee      	bne.n	8001120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001148:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	4a38      	ldr	r2, [pc, #224]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 800114e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80a1 	beq.w	80012a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800115e:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d05c      	beq.n	8001224 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d141      	bne.n	80011f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <HAL_RCC_OscConfig+0x478>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fd34 	bl	8000be4 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fd30 	bl	8000be4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e087      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	019b      	lsls	r3, r3, #6
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	3b01      	subs	r3, #1
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	491b      	ldr	r1, [pc, #108]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_RCC_OscConfig+0x478>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fd09 	bl	8000be4 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fd05 	bl	8000be4 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e05c      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x416>
 80011f4:	e054      	b.n	80012a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_RCC_OscConfig+0x478>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcf2 	bl	8000be4 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fcee 	bl	8000be4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e045      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_RCC_OscConfig+0x470>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x444>
 8001222:	e03d      	b.n	80012a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d107      	bne.n	800123c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e038      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000
 8001238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x4ec>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d028      	beq.n	800129c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d121      	bne.n	800129c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d11a      	bne.n	800129c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800126c:	4013      	ands	r3, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001274:	4293      	cmp	r3, r2
 8001276:	d111      	bne.n	800129c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	3b01      	subs	r3, #1
 8001286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d107      	bne.n	800129c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0cc      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c4:	4b68      	ldr	r3, [pc, #416]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d90c      	bls.n	80012ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b63      	ldr	r3, [pc, #396]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0b8      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001304:	4b59      	ldr	r3, [pc, #356]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a58      	ldr	r2, [pc, #352]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800130e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800131c:	4b53      	ldr	r3, [pc, #332]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	494d      	ldr	r1, [pc, #308]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d044      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b47      	ldr	r3, [pc, #284]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e07f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136a:	2b03      	cmp	r3, #3
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137e:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e067      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138e:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 0203 	bic.w	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fc20 	bl	8000be4 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	e00a      	b.n	80013be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a8:	f7ff fc1c 	bl	8000be4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e04f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 020c 	and.w	r2, r3, #12
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1eb      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d20c      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e032      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4916      	ldr	r1, [pc, #88]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	490e      	ldr	r1, [pc, #56]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001436:	f000 f821 	bl	800147c <HAL_RCC_GetSysClockFreq>
 800143a:	4602      	mov	r2, r0
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	490a      	ldr	r1, [pc, #40]	@ (8001470 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	5ccb      	ldrb	r3, [r1, r3]
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa0c 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00
 800146c:	40023800 	.word	0x40023800
 8001470:	08005710 	.word	0x08005710
 8001474:	20000004 	.word	0x20000004
 8001478:	20000008 	.word	0x20000008

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001480:	b090      	sub	sp, #64	@ 0x40
 8001482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001494:	4b59      	ldr	r3, [pc, #356]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d00d      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x40>
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	f200 80a1 	bhi.w	80015e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x34>
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80014ae:	e09b      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4b53      	ldr	r3, [pc, #332]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x184>)
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014b4:	e09b      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b6:	4b53      	ldr	r3, [pc, #332]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x188>)
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ba:	e098      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014bc:	4b4f      	ldr	r3, [pc, #316]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c6:	4b4d      	ldr	r3, [pc, #308]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d028      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d2:	4b4a      	ldr	r3, [pc, #296]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	2200      	movs	r2, #0
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014e4:	2100      	movs	r1, #0
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x188>)
 80014e8:	fb03 f201 	mul.w	r2, r3, r1
 80014ec:	2300      	movs	r3, #0
 80014ee:	fb00 f303 	mul.w	r3, r0, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x188>)
 80014f6:	fba0 1202 	umull	r1, r2, r0, r2
 80014fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014fc:	460a      	mov	r2, r1
 80014fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001502:	4413      	add	r3, r2
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001508:	2200      	movs	r2, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	61fa      	str	r2, [r7, #28]
 800150e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001516:	f7fe feb3 	bl	8000280 <__aeabi_uldivmod>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4613      	mov	r3, r2
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001522:	e053      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	617a      	str	r2, [r7, #20]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001536:	f04f 0b00 	mov.w	fp, #0
 800153a:	4652      	mov	r2, sl
 800153c:	465b      	mov	r3, fp
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	0159      	lsls	r1, r3, #5
 8001548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800154c:	0150      	lsls	r0, r2, #5
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	ebb2 080a 	subs.w	r8, r2, sl
 8001556:	eb63 090b 	sbc.w	r9, r3, fp
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800156a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800156e:	ebb2 0408 	subs.w	r4, r2, r8
 8001572:	eb63 0509 	sbc.w	r5, r3, r9
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	00eb      	lsls	r3, r5, #3
 8001580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001584:	00e2      	lsls	r2, r4, #3
 8001586:	4614      	mov	r4, r2
 8001588:	461d      	mov	r5, r3
 800158a:	eb14 030a 	adds.w	r3, r4, sl
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	eb45 030b 	adc.w	r3, r5, fp
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015a2:	4629      	mov	r1, r5
 80015a4:	028b      	lsls	r3, r1, #10
 80015a6:	4621      	mov	r1, r4
 80015a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015ac:	4621      	mov	r1, r4
 80015ae:	028a      	lsls	r2, r1, #10
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b6:	2200      	movs	r2, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	60fa      	str	r2, [r7, #12]
 80015bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c0:	f7fe fe5e 	bl	8000280 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x180>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80015dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x184>)
 80015ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3740      	adds	r7, #64	@ 0x40
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	00f42400 	.word	0x00f42400
 8001604:	017d7840 	.word	0x017d7840

08001608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_RCC_GetHCLKFreq+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001624:	f7ff fff0 	bl	8001608 <HAL_RCC_GetHCLKFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	0a9b      	lsrs	r3, r3, #10
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4903      	ldr	r1, [pc, #12]	@ (8001644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	08005720 	.word	0x08005720

08001648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	220f      	movs	r2, #15
 8001656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_RCC_GetClockConfig+0x5c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_RCC_GetClockConfig+0x5c>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <HAL_RCC_GetClockConfig+0x60>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0207 	and.w	r2, r3, #7
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e041      	b.n	8001742 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f839 	bl	800174a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f000 f9b2 	bl	8001a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d001      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e044      	b.n	8001802 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <HAL_TIM_Base_Start_IT+0xb0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d018      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x6c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a2:	d013      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x6c>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001814 <HAL_TIM_Base_Start_IT+0xb4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00e      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x6c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_TIM_Base_Start_IT+0xb8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x6c>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_TIM_Base_Start_IT+0xbc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x6c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <HAL_TIM_Base_Start_IT+0xc0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d010      	beq.n	8001800 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ee:	e007      	b.n	8001800 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40010000 	.word	0x40010000
 8001814:	40000400 	.word	0x40000400
 8001818:	40000800 	.word	0x40000800
 800181c:	40000c00 	.word	0x40000c00
 8001820:	40014000 	.word	0x40014000

08001824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0202 	mvn.w	r2, #2
 8001858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8d2 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8c4 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f8d5 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d020      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0204 	mvn.w	r2, #4
 80018a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8ac 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 80018c0:	e005      	b.n	80018ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f89e 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8af 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d020      	beq.n	8001920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0208 	mvn.w	r2, #8
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f886 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f878 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f889 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d020      	beq.n	800196c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0210 	mvn.w	r2, #16
 800193c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2208      	movs	r2, #8
 8001942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f860 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 8001958:	e005      	b.n	8001966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f852 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f863 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0201 	mvn.w	r2, #1
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe ff20 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80019ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8e0 	bl	8001b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f834 	bl	8001a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0220 	mvn.w	r2, #32
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8b2 	bl	8001b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <TIM_Base_SetConfig+0xf0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00f      	beq.n	8001a8c <TIM_Base_SetConfig+0x38>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a72:	d00b      	beq.n	8001a8c <TIM_Base_SetConfig+0x38>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a34      	ldr	r2, [pc, #208]	@ (8001b48 <TIM_Base_SetConfig+0xf4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <TIM_Base_SetConfig+0x38>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <TIM_Base_SetConfig+0xf8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <TIM_Base_SetConfig+0x38>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a32      	ldr	r2, [pc, #200]	@ (8001b50 <TIM_Base_SetConfig+0xfc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d108      	bne.n	8001a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a28      	ldr	r2, [pc, #160]	@ (8001b44 <TIM_Base_SetConfig+0xf0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01b      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d017      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	@ (8001b48 <TIM_Base_SetConfig+0xf4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <TIM_Base_SetConfig+0xf8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00f      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <TIM_Base_SetConfig+0xfc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00b      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <TIM_Base_SetConfig+0x100>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a21      	ldr	r2, [pc, #132]	@ (8001b58 <TIM_Base_SetConfig+0x104>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d003      	beq.n	8001ade <TIM_Base_SetConfig+0x8a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	@ (8001b5c <TIM_Base_SetConfig+0x108>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d108      	bne.n	8001af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a0c      	ldr	r2, [pc, #48]	@ (8001b44 <TIM_Base_SetConfig+0xf0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d103      	bne.n	8001b1e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f043 0204 	orr.w	r2, r3, #4
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	40014000 	.word	0x40014000
 8001b58:	40014400 	.word	0x40014400
 8001b5c:	40014800 	.word	0x40014800

08001b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <__NVIC_SetPriority>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <SysTick_Handler+0x1c>)
 8001be2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001be4:	f001 fd18 	bl	8003618 <xTaskGetSchedulerState>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001bee:	f002 fb13 	bl	8004218 <xPortSysTickHandler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001c00:	2100      	movs	r1, #0
 8001c02:	f06f 0004 	mvn.w	r0, #4
 8001c06:	f7ff ffbf 	bl	8001b88 <__NVIC_SetPriority>
#endif
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c16:	f3ef 8305 	mrs	r3, IPSR
 8001c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001c22:	f06f 0305 	mvn.w	r3, #5
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	e00c      	b.n	8001c44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <osKernelInitialize+0x44>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <osKernelInitialize+0x44>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e002      	b.n	8001c44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200000e4 	.word	0x200000e4

08001c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c5e:	f3ef 8305 	mrs	r3, IPSR
 8001c62:	603b      	str	r3, [r7, #0]
  return(result);
 8001c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c6a:	f06f 0305 	mvn.w	r3, #5
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	e010      	b.n	8001c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <osKernelStart+0x48>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d109      	bne.n	8001c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c7a:	f7ff ffbf 	bl	8001bfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <osKernelStart+0x48>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c84:	f001 f87a 	bl	8002d7c <vTaskStartScheduler>
      stat = osOK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	e002      	b.n	8001c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200000e4 	.word	0x200000e4

08001ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	@ 0x38
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cb4:	f3ef 8305 	mrs	r3, IPSR
 8001cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8001cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d17e      	bne.n	8001dbe <osThreadNew+0x11a>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07b      	beq.n	8001dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001cca:	2318      	movs	r3, #24
 8001ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d045      	beq.n	8001d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <osThreadNew+0x48>
        name = attr->name;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <osThreadNew+0x6e>
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b38      	cmp	r3, #56	@ 0x38
 8001d04:	d805      	bhi.n	8001d12 <osThreadNew+0x6e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <osThreadNew+0x72>
        return (NULL);
 8001d12:	2300      	movs	r3, #0
 8001d14:	e054      	b.n	8001dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00e      	beq.n	8001d4c <osThreadNew+0xa8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d34:	d90a      	bls.n	8001d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <osThreadNew+0xa8>
        mem = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	e010      	b.n	8001d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10c      	bne.n	8001d6e <osThreadNew+0xca>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d108      	bne.n	8001d6e <osThreadNew+0xca>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <osThreadNew+0xca>
          mem = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e001      	b.n	8001d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d110      	bne.n	8001d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d7c:	9202      	str	r2, [sp, #8]
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fe1a 	bl	80029c4 <xTaskCreateStatic>
 8001d90:	4603      	mov	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e013      	b.n	8001dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d110      	bne.n	8001dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fe68 	bl	8002a84 <xTaskCreate>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <osThreadNew+0x11a>
            hTask = NULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001dbe:	693b      	ldr	r3, [r7, #16]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dd0:	f3ef 8305 	mrs	r3, IPSR
 8001dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <osDelay+0x1c>
    stat = osErrorISR;
 8001ddc:	f06f 0305 	mvn.w	r3, #5
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e007      	b.n	8001df4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 ff8e 	bl	8002d10 <vTaskDelay>
    }
  }

  return (stat);
 8001df4:	68fb      	ldr	r3, [r7, #12]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <vApplicationGetIdleTaskMemory+0x2c>)
 8001e10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <vApplicationGetIdleTaskMemory+0x30>)
 8001e16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200000e8 	.word	0x200000e8
 8001e30:	20000144 	.word	0x20000144

08001e34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4a07      	ldr	r2, [pc, #28]	@ (8001e60 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <vApplicationGetTimerTaskMemory+0x30>)
 8001e4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	20000344 	.word	0x20000344
 8001e64:	200003a0 	.word	0x200003a0

08001e68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 0208 	add.w	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0208 	add.w	r2, r3, #8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f103 0208 	add.w	r2, r3, #8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f20:	d103      	bne.n	8001f2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00c      	b.n	8001f44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e002      	b.n	8001f38 <vListInsert+0x2e>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d2f6      	bcs.n	8001f32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6892      	ldr	r2, [r2, #8]
 8001f92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6852      	ldr	r2, [r2, #4]
 8001f9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d103      	bne.n	8001fb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ffc:	f002 f87c 	bl	80040f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	441a      	add	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	3b01      	subs	r3, #1
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	441a      	add	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	22ff      	movs	r2, #255	@ 0xff
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	22ff      	movs	r2, #255	@ 0xff
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d114      	bne.n	800207c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01a      	beq.n	8002090 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3310      	adds	r3, #16
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f91a 	bl	8003298 <xTaskRemoveFromEventList>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <xQueueGenericReset+0xd0>)
 800206c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	e009      	b.n	8002090 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3310      	adds	r3, #16
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fef1 	bl	8001e68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3324      	adds	r3, #36	@ 0x24
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff feec 	bl	8001e68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002090:	f002 f864 	bl	800415c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10b      	bne.n	80020ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80020d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	e7fd      	b.n	80020ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <xQueueGenericCreateStatic+0x56>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <xQueueGenericCreateStatic+0x5a>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <xQueueGenericCreateStatic+0x5c>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	623b      	str	r3, [r7, #32]
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <xQueueGenericCreateStatic+0x84>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <xQueueGenericCreateStatic+0x88>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <xQueueGenericCreateStatic+0x8a>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	61fb      	str	r3, [r7, #28]
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800214a:	2350      	movs	r3, #80	@ 0x50
 800214c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b50      	cmp	r3, #80	@ 0x50
 8002152:	d00b      	beq.n	800216c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	61bb      	str	r3, [r7, #24]
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800216c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002180:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f805 	bl	800219e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002196:	4618      	mov	r0, r3
 8002198:	3730      	adds	r7, #48	@ 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e002      	b.n	80021c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021cc:	2101      	movs	r1, #1
 80021ce:	69b8      	ldr	r0, [r7, #24]
 80021d0:	f7ff fefe 	bl	8001fd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	@ 0x38
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <xQueueGenericSend+0x34>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <xQueueGenericSend+0x42>
 800221e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <xQueueGenericSend+0x46>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <xQueueGenericSend+0x48>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <xQueueGenericSend+0x64>
	__asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d103      	bne.n	8002256 <xQueueGenericSend+0x72>
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <xQueueGenericSend+0x76>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <xQueueGenericSend+0x78>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <xQueueGenericSend+0x94>
	__asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	623b      	str	r3, [r7, #32]
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002278:	f001 f9ce 	bl	8003618 <xTaskGetSchedulerState>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <xQueueGenericSend+0xa4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <xQueueGenericSend+0xa8>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <xQueueGenericSend+0xaa>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <xQueueGenericSend+0xc6>
	__asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	61fb      	str	r3, [r7, #28]
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	e7fd      	b.n	80022a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022aa:	f001 ff25 	bl	80040f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <xQueueGenericSend+0xdc>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d129      	bne.n	8002314 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022c6:	f000 fa0f 	bl	80026e8 <prvCopyDataToQueue>
 80022ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	3324      	adds	r3, #36	@ 0x24
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 ffdd 	bl	8003298 <xTaskRemoveFromEventList>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022e4:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <xQueueGenericSend+0x200>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	e00a      	b.n	800230c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022fc:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <xQueueGenericSend+0x200>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800230c:	f001 ff26 	bl	800415c <vPortExitCritical>
				return pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	e063      	b.n	80023dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800231a:	f001 ff1f 	bl	800415c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800231e:	2300      	movs	r3, #0
 8002320:	e05c      	b.n	80023dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4618      	mov	r0, r3
 800232e:	f001 f817 	bl	8003360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002336:	f001 ff11 	bl	800415c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800233a:	f000 fd87 	bl	8002e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233e:	f001 fedb 	bl	80040f8 <vPortEnterCritical>
 8002342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002348:	b25b      	sxtb	r3, r3
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800234e:	d103      	bne.n	8002358 <xQueueGenericSend+0x174>
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800235e:	b25b      	sxtb	r3, r3
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002364:	d103      	bne.n	800236e <xQueueGenericSend+0x18a>
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800236e:	f001 fef5 	bl	800415c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002372:	1d3a      	adds	r2, r7, #4
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f001 f806 	bl	800338c <xTaskCheckForTimeOut>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d124      	bne.n	80023d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002386:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002388:	f000 faa6 	bl	80028d8 <prvIsQueueFull>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	3310      	adds	r3, #16
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 ff2a 	bl	80031f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023a2:	f000 fa31 	bl	8002808 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023a6:	f000 fd5f 	bl	8002e68 <xTaskResumeAll>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f af7c 	bne.w	80022aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <xQueueGenericSend+0x200>)
 80023b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	e772      	b.n	80022aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c6:	f000 fa1f 	bl	8002808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023ca:	f000 fd4d 	bl	8002e68 <xTaskResumeAll>
 80023ce:	e76c      	b.n	80022aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023d2:	f000 fa19 	bl	8002808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023d6:	f000 fd47 	bl	8002e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3738      	adds	r7, #56	@ 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b090      	sub	sp, #64	@ 0x40
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80023fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <xQueueGenericSendFromISR+0x3e>
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <xQueueGenericSendFromISR+0x42>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <xQueueGenericSendFromISR+0x44>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d103      	bne.n	8002456 <xQueueGenericSendFromISR+0x6e>
 800244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <xQueueGenericSendFromISR+0x72>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueGenericSendFromISR+0x74>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	623b      	str	r3, [r7, #32]
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002478:	f001 ff1e 	bl	80042b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800247c:	f3ef 8211 	mrs	r2, BASEPRI
 8002480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	61fa      	str	r2, [r7, #28]
 8002492:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002494:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <xQueueGenericSendFromISR+0xc2>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d12f      	bne.n	800250a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80024c0:	f000 f912 	bl	80026e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024cc:	d112      	bne.n	80024f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	3324      	adds	r3, #36	@ 0x24
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fedc 	bl	8003298 <xTaskRemoveFromEventList>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00e      	beq.n	8002504 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e007      	b.n	8002504 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002504:	2301      	movs	r3, #1
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002508:	e001      	b.n	800250e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800250a:	2300      	movs	r3, #0
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800250e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002510:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002518:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800251a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800251c:	4618      	mov	r0, r3
 800251e:	3740      	adds	r7, #64	@ 0x40
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	@ 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <xQueueReceive+0x32>
	__asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	623b      	str	r3, [r7, #32]
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <xQueueReceive+0x40>
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <xQueueReceive+0x44>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <xQueueReceive+0x46>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <xQueueReceive+0x62>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	61fb      	str	r3, [r7, #28]
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002586:	f001 f847 	bl	8003618 <xTaskGetSchedulerState>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <xQueueReceive+0x72>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <xQueueReceive+0x76>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueReceive+0x78>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <xQueueReceive+0x94>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	61bb      	str	r3, [r7, #24]
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025b8:	f001 fd9e 	bl	80040f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01f      	beq.n	8002608 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025cc:	f000 f8f6 	bl	80027bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00f      	beq.n	8002600 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	3310      	adds	r3, #16
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fe57 	bl	8003298 <xTaskRemoveFromEventList>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025f0:	4b3c      	ldr	r3, [pc, #240]	@ (80026e4 <xQueueReceive+0x1c0>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002600:	f001 fdac 	bl	800415c <vPortExitCritical>
				return pdPASS;
 8002604:	2301      	movs	r3, #1
 8002606:	e069      	b.n	80026dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800260e:	f001 fda5 	bl	800415c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002612:	2300      	movs	r3, #0
 8002614:	e062      	b.n	80026dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fe9d 	bl	8003360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002626:	2301      	movs	r3, #1
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800262a:	f001 fd97 	bl	800415c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800262e:	f000 fc0d 	bl	8002e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002632:	f001 fd61 	bl	80040f8 <vPortEnterCritical>
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800263c:	b25b      	sxtb	r3, r3
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002642:	d103      	bne.n	800264c <xQueueReceive+0x128>
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002652:	b25b      	sxtb	r3, r3
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002658:	d103      	bne.n	8002662 <xQueueReceive+0x13e>
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002662:	f001 fd7b 	bl	800415c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002666:	1d3a      	adds	r2, r7, #4
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fe8c 	bl	800338c <xTaskCheckForTimeOut>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d123      	bne.n	80026c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800267a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800267c:	f000 f916 	bl	80028ac <prvIsQueueEmpty>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002688:	3324      	adds	r3, #36	@ 0x24
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fdb0 	bl	80031f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002696:	f000 f8b7 	bl	8002808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800269a:	f000 fbe5 	bl	8002e68 <xTaskResumeAll>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d189      	bne.n	80025b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <xQueueReceive+0x1c0>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	e780      	b.n	80025b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b8:	f000 f8a6 	bl	8002808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026bc:	f000 fbd4 	bl	8002e68 <xTaskResumeAll>
 80026c0:	e77a      	b.n	80025b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c4:	f000 f8a0 	bl	8002808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026c8:	f000 fbce 	bl	8002e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ce:	f000 f8ed 	bl	80028ac <prvIsQueueEmpty>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f43f af6f 	beq.w	80025b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3730      	adds	r7, #48	@ 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d14d      	bne.n	80027aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 ff9e 	bl	8003654 <xTaskPriorityDisinherit>
 8002718:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e043      	b.n	80027aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d119      	bne.n	800275c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6858      	ldr	r0, [r3, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	461a      	mov	r2, r3
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	f002 fa75 	bl	8004c22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	441a      	add	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d32b      	bcc.n	80027aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e026      	b.n	80027aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68d8      	ldr	r0, [r3, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	461a      	mov	r2, r3
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	f002 fa5b 	bl	8004c22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	425b      	negs	r3, r3
 8002776:	441a      	add	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	425b      	negs	r3, r3
 8002792:	441a      	add	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d105      	bne.n	80027aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80027b2:	697b      	ldr	r3, [r7, #20]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	441a      	add	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d303      	bcc.n	80027f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	461a      	mov	r2, r3
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	f002 fa11 	bl	8004c22 <memcpy>
	}
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002810:	f001 fc72 	bl	80040f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800281a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800281c:	e011      	b.n	8002842 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3324      	adds	r3, #36	@ 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd34 	bl	8003298 <xTaskRemoveFromEventList>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002836:	f000 fe0d 	bl	8003454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3b01      	subs	r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	dce9      	bgt.n	800281e <prvUnlockQueue+0x16>
 800284a:	e000      	b.n	800284e <prvUnlockQueue+0x46>
					break;
 800284c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	22ff      	movs	r2, #255	@ 0xff
 8002852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002856:	f001 fc81 	bl	800415c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800285a:	f001 fc4d 	bl	80040f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002864:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002866:	e011      	b.n	800288c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3310      	adds	r3, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fd0f 	bl	8003298 <xTaskRemoveFromEventList>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002880:	f000 fde8 	bl	8003454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	3b01      	subs	r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800288c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002890:	2b00      	cmp	r3, #0
 8002892:	dce9      	bgt.n	8002868 <prvUnlockQueue+0x60>
 8002894:	e000      	b.n	8002898 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002896:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	22ff      	movs	r2, #255	@ 0xff
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80028a0:	f001 fc5c 	bl	800415c <vPortExitCritical>
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028b4:	f001 fc20 	bl	80040f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e001      	b.n	80028ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028ca:	f001 fc47 	bl	800415c <vPortExitCritical>

	return xReturn;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028e0:	f001 fc0a 	bl	80040f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d102      	bne.n	80028f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e001      	b.n	80028fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028fa:	f001 fc2f 	bl	800415c <vPortExitCritical>

	return xReturn;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e014      	b.n	8002942 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002918:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <vQueueAddToRegistry+0x50>)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002924:	490c      	ldr	r1, [pc, #48]	@ (8002958 <vQueueAddToRegistry+0x50>)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <vQueueAddToRegistry+0x50>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800293a:	e006      	b.n	800294a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3301      	adds	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b07      	cmp	r3, #7
 8002946:	d9e7      	bls.n	8002918 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200007a0 	.word	0x200007a0

0800295c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800296c:	f001 fbc4 	bl	80040f8 <vPortEnterCritical>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800297c:	d103      	bne.n	8002986 <vQueueWaitForMessageRestricted+0x2a>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800298c:	b25b      	sxtb	r3, r3
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002992:	d103      	bne.n	800299c <vQueueWaitForMessageRestricted+0x40>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800299c:	f001 fbde 	bl	800415c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3324      	adds	r3, #36	@ 0x24
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fc45 	bl	8003240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff26 	bl	8002808 <prvUnlockQueue>
	}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08e      	sub	sp, #56	@ 0x38
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	623b      	str	r3, [r7, #32]
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <xTaskCreateStatic+0x4a>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61fb      	str	r3, [r7, #28]
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a0e:	235c      	movs	r3, #92	@ 0x5c
 8002a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b5c      	cmp	r3, #92	@ 0x5c
 8002a16:	d00b      	beq.n	8002a30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	61bb      	str	r3, [r7, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01e      	beq.n	8002a76 <xTaskCreateStatic+0xb2>
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01b      	beq.n	8002a76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a50:	2300      	movs	r3, #0
 8002a52:	9303      	str	r3, [sp, #12]
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f850 	bl	8002b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a70:	f000 f8de 	bl	8002c30 <prvAddNewTaskToReadyList>
 8002a74:	e001      	b.n	8002a7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a7a:	697b      	ldr	r3, [r7, #20]
	}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	@ 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	@ 0x30
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fc4f 	bl	800433c <pvPortMalloc>
 8002a9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00e      	beq.n	8002ac4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aa6:	205c      	movs	r0, #92	@ 0x5c
 8002aa8:	f001 fc48 	bl	800433c <pvPortMalloc>
 8002aac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aba:	e005      	b.n	8002ac8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002abc:	6978      	ldr	r0, [r7, #20]
 8002abe:	f001 fd0b 	bl	80044d8 <vPortFree>
 8002ac2:	e001      	b.n	8002ac8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9303      	str	r3, [sp, #12]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f80e 	bl	8002b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af2:	69f8      	ldr	r0, [r7, #28]
 8002af4:	f000 f89c 	bl	8002c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e002      	b.n	8002b04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b04:	69bb      	ldr	r3, [r7, #24]
	}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b088      	sub	sp, #32
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	21a5      	movs	r1, #165	@ 0xa5
 8002b28:	f002 f800 	bl	8004b2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b36:	3b01      	subs	r3, #1
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f023 0307 	bic.w	r3, r3, #7
 8002b44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	617b      	str	r3, [r7, #20]
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01f      	beq.n	8002bae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e012      	b.n	8002b9a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	7819      	ldrb	r1, [r3, #0]
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	3334      	adds	r3, #52	@ 0x34
 8002b84:	460a      	mov	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d9e9      	bls.n	8002b74 <prvInitialiseNewTask+0x66>
 8002ba0:	e000      	b.n	8002ba4 <prvInitialiseNewTask+0x96>
			{
				break;
 8002ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bac:	e003      	b.n	8002bb6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2b37      	cmp	r3, #55	@ 0x37
 8002bba:	d901      	bls.n	8002bc0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bbc:	2337      	movs	r3, #55	@ 0x37
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f966 	bl	8001ea8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	3318      	adds	r3, #24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f961 	bl	8001ea8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	69b8      	ldr	r0, [r7, #24]
 8002c10:	f001 f93e 	bl	8003e90 <pxPortInitialiseStack>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c38:	f001 fa5e 	bl	80040f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c46:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c54:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d110      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c5c:	f000 fc1e 	bl	800349c <prvInitialiseTaskLists>
 8002c60:	e00d      	b.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <prvAddNewTaskToReadyList+0xcc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d802      	bhi.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c78:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	@ (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <prvAddNewTaskToReadyList+0xd4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d903      	bls.n	8002ca4 <prvAddNewTaskToReadyList+0x74>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	4a18      	ldr	r2, [pc, #96]	@ (8002d04 <prvAddNewTaskToReadyList+0xd4>)
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <prvAddNewTaskToReadyList+0xd8>)
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7ff f901 	bl	8001ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 fa4c 	bl	800415c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <prvAddNewTaskToReadyList+0xcc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d207      	bcs.n	8002cea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cda:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <prvAddNewTaskToReadyList+0xdc>)
 8002cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000cb4 	.word	0x20000cb4
 8002cf8:	200007e0 	.word	0x200007e0
 8002cfc:	20000cc0 	.word	0x20000cc0
 8002d00:	20000cd0 	.word	0x20000cd0
 8002d04:	20000cbc 	.word	0x20000cbc
 8002d08:	200007e4 	.word	0x200007e4
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d22:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <vTaskDelay+0x64>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <vTaskDelay+0x32>
	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	60bb      	str	r3, [r7, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d42:	f000 f883 	bl	8002e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d46:	2100      	movs	r1, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fcf3 	bl	8003734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d4e:	f000 f88b 	bl	8002e68 <xTaskResumeAll>
 8002d52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002d5a:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <vTaskDelay+0x68>)
 8002d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000cdc 	.word	0x20000cdc
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	1d39      	adds	r1, r7, #4
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f834 	bl	8001e00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	9202      	str	r2, [sp, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	460a      	mov	r2, r1
 8002daa:	4922      	ldr	r1, [pc, #136]	@ (8002e34 <vTaskStartScheduler+0xb8>)
 8002dac:	4822      	ldr	r0, [pc, #136]	@ (8002e38 <vTaskStartScheduler+0xbc>)
 8002dae:	f7ff fe09 	bl	80029c4 <xTaskCreateStatic>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a21      	ldr	r2, [pc, #132]	@ (8002e3c <vTaskStartScheduler+0xc0>)
 8002db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002db8:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <vTaskStartScheduler+0xc0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e001      	b.n	8002dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002dd0:	f000 fd04 	bl	80037dc <xTimerCreateTimerTask>
 8002dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d116      	bne.n	8002e0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	613b      	str	r3, [r7, #16]
}
 8002dee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002df0:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <vTaskStartScheduler+0xc4>)
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002df8:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <vTaskStartScheduler+0xc8>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <vTaskStartScheduler+0xcc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e04:	f001 f8d4 	bl	8003fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e08:	e00f      	b.n	8002e2a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e10:	d10b      	bne.n	8002e2a <vTaskStartScheduler+0xae>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60fb      	str	r3, [r7, #12]
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <vTaskStartScheduler+0xaa>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	080056b0 	.word	0x080056b0
 8002e38:	0800346d 	.word	0x0800346d
 8002e3c:	20000cd8 	.word	0x20000cd8
 8002e40:	20000cd4 	.word	0x20000cd4
 8002e44:	20000cc0 	.word	0x20000cc0
 8002e48:	20000cb8 	.word	0x20000cb8

08002e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <vTaskSuspendAll+0x18>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a03      	ldr	r2, [pc, #12]	@ (8002e64 <vTaskSuspendAll+0x18>)
 8002e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	20000cdc 	.word	0x20000cdc

08002e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e76:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <xTaskResumeAll+0x118>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <xTaskResumeAll+0x2e>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	603b      	str	r3, [r7, #0]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e96:	f001 f92f 	bl	80040f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e9a:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <xTaskResumeAll+0x118>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	4a37      	ldr	r2, [pc, #220]	@ (8002f80 <xTaskResumeAll+0x118>)
 8002ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea4:	4b36      	ldr	r3, [pc, #216]	@ (8002f80 <xTaskResumeAll+0x118>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d162      	bne.n	8002f72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002eac:	4b35      	ldr	r3, [pc, #212]	@ (8002f84 <xTaskResumeAll+0x11c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05e      	beq.n	8002f72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb4:	e02f      	b.n	8002f16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb6:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <xTaskResumeAll+0x120>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f85a 	bl	8001f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f855 	bl	8001f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <xTaskResumeAll+0x124>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d903      	bls.n	8002ee6 <xTaskResumeAll+0x7e>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <xTaskResumeAll+0x124>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <xTaskResumeAll+0x128>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7fe ffe0 	bl	8001ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f06:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <xTaskResumeAll+0x12c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002f10:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <xTaskResumeAll+0x130>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f16:	4b1c      	ldr	r3, [pc, #112]	@ (8002f88 <xTaskResumeAll+0x120>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1cb      	bne.n	8002eb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f24:	f000 fb58 	bl	80035d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f28:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <xTaskResumeAll+0x134>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f34:	f000 f846 	bl	8002fc4 <xTaskIncrementTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <xTaskResumeAll+0x130>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f1      	bne.n	8002f34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <xTaskResumeAll+0x134>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <xTaskResumeAll+0x130>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <xTaskResumeAll+0x138>)
 8002f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f72:	f001 f8f3 	bl	800415c <vPortExitCritical>

	return xAlreadyYielded;
 8002f76:	68bb      	ldr	r3, [r7, #8]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000cdc 	.word	0x20000cdc
 8002f84:	20000cb4 	.word	0x20000cb4
 8002f88:	20000c74 	.word	0x20000c74
 8002f8c:	20000cbc 	.word	0x20000cbc
 8002f90:	200007e4 	.word	0x200007e4
 8002f94:	200007e0 	.word	0x200007e0
 8002f98:	20000cc8 	.word	0x20000cc8
 8002f9c:	20000cc4 	.word	0x20000cc4
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <xTaskGetTickCount+0x1c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000cb8 	.word	0x20000cb8

08002fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fce:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <xTaskIncrementTick+0x148>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 8090 	bne.w	80030f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003110 <xTaskIncrementTick+0x14c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <xTaskIncrementTick+0x14c>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d121      	bne.n	8003030 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fec:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <xTaskIncrementTick+0x150>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	603b      	str	r3, [r7, #0]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xTaskIncrementTick+0x46>
 800300e:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <xTaskIncrementTick+0x150>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b40      	ldr	r3, [pc, #256]	@ (8003118 <xTaskIncrementTick+0x154>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3e      	ldr	r2, [pc, #248]	@ (8003114 <xTaskIncrementTick+0x150>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4a3e      	ldr	r2, [pc, #248]	@ (8003118 <xTaskIncrementTick+0x154>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b3e      	ldr	r3, [pc, #248]	@ (800311c <xTaskIncrementTick+0x158>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a3c      	ldr	r2, [pc, #240]	@ (800311c <xTaskIncrementTick+0x158>)
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	f000 fad4 	bl	80035d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003030:	4b3b      	ldr	r3, [pc, #236]	@ (8003120 <xTaskIncrementTick+0x15c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	d349      	bcc.n	80030ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800303a:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <xTaskIncrementTick+0x150>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003044:	4b36      	ldr	r3, [pc, #216]	@ (8003120 <xTaskIncrementTick+0x15c>)
 8003046:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800304a:	601a      	str	r2, [r3, #0]
					break;
 800304c:	e03f      	b.n	80030ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800304e:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <xTaskIncrementTick+0x150>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d203      	bcs.n	800306e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003066:	4a2e      	ldr	r2, [pc, #184]	@ (8003120 <xTaskIncrementTick+0x15c>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800306c:	e02f      	b.n	80030ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3304      	adds	r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe ff82 	bl	8001f7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3318      	adds	r3, #24
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe ff79 	bl	8001f7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308e:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <xTaskIncrementTick+0x160>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d903      	bls.n	800309e <xTaskIncrementTick+0xda>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <xTaskIncrementTick+0x160>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003128 <xTaskIncrementTick+0x164>)
 80030ac:	441a      	add	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe ff04 	bl	8001ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030be:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <xTaskIncrementTick+0x168>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3b8      	bcc.n	800303a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030cc:	e7b5      	b.n	800303a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ce:	4b17      	ldr	r3, [pc, #92]	@ (800312c <xTaskIncrementTick+0x168>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	4914      	ldr	r1, [pc, #80]	@ (8003128 <xTaskIncrementTick+0x164>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d901      	bls.n	80030ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <xTaskIncrementTick+0x16c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e004      	b.n	8003102 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <xTaskIncrementTick+0x170>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <xTaskIncrementTick+0x170>)
 8003100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003102:	697b      	ldr	r3, [r7, #20]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000cdc 	.word	0x20000cdc
 8003110:	20000cb8 	.word	0x20000cb8
 8003114:	20000c6c 	.word	0x20000c6c
 8003118:	20000c70 	.word	0x20000c70
 800311c:	20000ccc 	.word	0x20000ccc
 8003120:	20000cd4 	.word	0x20000cd4
 8003124:	20000cbc 	.word	0x20000cbc
 8003128:	200007e4 	.word	0x200007e4
 800312c:	200007e0 	.word	0x200007e0
 8003130:	20000cc8 	.word	0x20000cc8
 8003134:	20000cc4 	.word	0x20000cc4

08003138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800313e:	4b28      	ldr	r3, [pc, #160]	@ (80031e0 <vTaskSwitchContext+0xa8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <vTaskSwitchContext+0xac>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800314c:	e042      	b.n	80031d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800314e:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <vTaskSwitchContext+0xac>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <vTaskSwitchContext+0xb0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e011      	b.n	8003180 <vTaskSwitchContext+0x48>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <vTaskSwitchContext+0x42>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	607b      	str	r3, [r7, #4]
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <vTaskSwitchContext+0x3e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b01      	subs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	491a      	ldr	r1, [pc, #104]	@ (80031ec <vTaskSwitchContext+0xb4>)
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0e3      	beq.n	800315c <vTaskSwitchContext+0x24>
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <vTaskSwitchContext+0xb4>)
 80031a0:	4413      	add	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3308      	adds	r3, #8
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d104      	bne.n	80031c4 <vTaskSwitchContext+0x8c>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <vTaskSwitchContext+0xb8>)
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4a06      	ldr	r2, [pc, #24]	@ (80031e8 <vTaskSwitchContext+0xb0>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	20000cdc 	.word	0x20000cdc
 80031e4:	20000cc8 	.word	0x20000cc8
 80031e8:	20000cbc 	.word	0x20000cbc
 80031ec:	200007e4 	.word	0x200007e4
 80031f0:	200007e0 	.word	0x200007e0

080031f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60fb      	str	r3, [r7, #12]
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800321c:	4b07      	ldr	r3, [pc, #28]	@ (800323c <vTaskPlaceOnEventList+0x48>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3318      	adds	r3, #24
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fe fe70 	bl	8001f0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800322a:	2101      	movs	r1, #1
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f000 fa81 	bl	8003734 <prvAddCurrentTaskToDelayedList>
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200007e0 	.word	0x200007e0

08003240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	617b      	str	r3, [r7, #20]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <vTaskPlaceOnEventListRestricted+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3318      	adds	r3, #24
 8003270:	4619      	mov	r1, r3
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fe fe25 	bl	8001ec2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003282:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68b8      	ldr	r0, [r7, #8]
 8003288:	f000 fa54 	bl	8003734 <prvAddCurrentTaskToDelayedList>
	}
 800328c:	bf00      	nop
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200007e0 	.word	0x200007e0

08003298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	60fb      	str	r3, [r7, #12]
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3318      	adds	r3, #24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fe56 	bl	8001f7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <xTaskRemoveFromEventList+0xb0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11d      	bne.n	8003314 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fe4d 	bl	8001f7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e6:	4b19      	ldr	r3, [pc, #100]	@ (800334c <xTaskRemoveFromEventList+0xb4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d903      	bls.n	80032f6 <xTaskRemoveFromEventList+0x5e>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	4a16      	ldr	r2, [pc, #88]	@ (800334c <xTaskRemoveFromEventList+0xb4>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a13      	ldr	r2, [pc, #76]	@ (8003350 <xTaskRemoveFromEventList+0xb8>)
 8003304:	441a      	add	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7fe fdd8 	bl	8001ec2 <vListInsertEnd>
 8003312:	e005      	b.n	8003320 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	3318      	adds	r3, #24
 8003318:	4619      	mov	r1, r3
 800331a:	480e      	ldr	r0, [pc, #56]	@ (8003354 <xTaskRemoveFromEventList+0xbc>)
 800331c:	f7fe fdd1 	bl	8001ec2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <xTaskRemoveFromEventList+0xc0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	429a      	cmp	r2, r3
 800332c:	d905      	bls.n	800333a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800332e:	2301      	movs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <xTaskRemoveFromEventList+0xc4>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e001      	b.n	800333e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000cdc 	.word	0x20000cdc
 800334c:	20000cbc 	.word	0x20000cbc
 8003350:	200007e4 	.word	0x200007e4
 8003354:	20000c74 	.word	0x20000c74
 8003358:	200007e0 	.word	0x200007e0
 800335c:	20000cc8 	.word	0x20000cc8

08003360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <vTaskInternalSetTimeOutState+0x24>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <vTaskInternalSetTimeOutState+0x28>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	605a      	str	r2, [r3, #4]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	20000ccc 	.word	0x20000ccc
 8003388:	20000cb8 	.word	0x20000cb8

0800338c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	613b      	str	r3, [r7, #16]
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	60fb      	str	r3, [r7, #12]
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	e7fd      	b.n	80033ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80033d2:	f000 fe91 	bl	80040f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <xTaskCheckForTimeOut+0xc0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ee:	d102      	bne.n	80033f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e023      	b.n	800343e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <xTaskCheckForTimeOut+0xc4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d007      	beq.n	8003412 <xTaskCheckForTimeOut+0x86>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e015      	b.n	800343e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d20b      	bcs.n	8003434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1ad2      	subs	r2, r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff99 	bl	8003360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e004      	b.n	800343e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800343a:	2301      	movs	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800343e:	f000 fe8d 	bl	800415c <vPortExitCritical>

	return xReturn;
 8003442:	69fb      	ldr	r3, [r7, #28]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000cb8 	.word	0x20000cb8
 8003450:	20000ccc 	.word	0x20000ccc

08003454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <vTaskMissedYield+0x14>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	20000cc8 	.word	0x20000cc8

0800346c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003474:	f000 f852 	bl	800351c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003478:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <prvIdleTask+0x28>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d9f9      	bls.n	8003474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <prvIdleTask+0x2c>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003490:	e7f0      	b.n	8003474 <prvIdleTask+0x8>
 8003492:	bf00      	nop
 8003494:	200007e4 	.word	0x200007e4
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	e00c      	b.n	80034c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <prvInitialiseTaskLists+0x60>)
 80034b4:	4413      	add	r3, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fcd6 	bl	8001e68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3301      	adds	r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b37      	cmp	r3, #55	@ 0x37
 80034c6:	d9ef      	bls.n	80034a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034c8:	480d      	ldr	r0, [pc, #52]	@ (8003500 <prvInitialiseTaskLists+0x64>)
 80034ca:	f7fe fccd 	bl	8001e68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ce:	480d      	ldr	r0, [pc, #52]	@ (8003504 <prvInitialiseTaskLists+0x68>)
 80034d0:	f7fe fcca 	bl	8001e68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034d4:	480c      	ldr	r0, [pc, #48]	@ (8003508 <prvInitialiseTaskLists+0x6c>)
 80034d6:	f7fe fcc7 	bl	8001e68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034da:	480c      	ldr	r0, [pc, #48]	@ (800350c <prvInitialiseTaskLists+0x70>)
 80034dc:	f7fe fcc4 	bl	8001e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034e0:	480b      	ldr	r0, [pc, #44]	@ (8003510 <prvInitialiseTaskLists+0x74>)
 80034e2:	f7fe fcc1 	bl	8001e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <prvInitialiseTaskLists+0x78>)
 80034e8:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <prvInitialiseTaskLists+0x64>)
 80034ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <prvInitialiseTaskLists+0x7c>)
 80034ee:	4a05      	ldr	r2, [pc, #20]	@ (8003504 <prvInitialiseTaskLists+0x68>)
 80034f0:	601a      	str	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200007e4 	.word	0x200007e4
 8003500:	20000c44 	.word	0x20000c44
 8003504:	20000c58 	.word	0x20000c58
 8003508:	20000c74 	.word	0x20000c74
 800350c:	20000c88 	.word	0x20000c88
 8003510:	20000ca0 	.word	0x20000ca0
 8003514:	20000c6c 	.word	0x20000c6c
 8003518:	20000c70 	.word	0x20000c70

0800351c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003522:	e019      	b.n	8003558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003524:	f000 fde8 	bl	80040f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <prvCheckTasksWaitingTermination+0x50>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fd21 	bl	8001f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <prvCheckTasksWaitingTermination+0x54>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3b01      	subs	r3, #1
 8003540:	4a0b      	ldr	r2, [pc, #44]	@ (8003570 <prvCheckTasksWaitingTermination+0x54>)
 8003542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <prvCheckTasksWaitingTermination+0x58>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3b01      	subs	r3, #1
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <prvCheckTasksWaitingTermination+0x58>)
 800354c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800354e:	f000 fe05 	bl	800415c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f810 	bl	8003578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <prvCheckTasksWaitingTermination+0x58>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e1      	bne.n	8003524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000c88 	.word	0x20000c88
 8003570:	20000cb4 	.word	0x20000cb4
 8003574:	20000c9c 	.word	0x20000c9c

08003578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4618      	mov	r0, r3
 8003590:	f000 ffa2 	bl	80044d8 <vPortFree>
				vPortFree( pxTCB );
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ff9f 	bl	80044d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800359a:	e019      	b.n	80035d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d103      	bne.n	80035ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 ff96 	bl	80044d8 <vPortFree>
	}
 80035ac:	e010      	b.n	80035d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00b      	beq.n	80035d0 <prvDeleteTCB+0x58>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60fb      	str	r3, [r7, #12]
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <prvDeleteTCB+0x54>
	}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <prvResetNextTaskUnblockTime+0x38>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <prvResetNextTaskUnblockTime+0x3c>)
 80035ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035f0:	e008      	b.n	8003604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f2:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <prvResetNextTaskUnblockTime+0x38>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a04      	ldr	r2, [pc, #16]	@ (8003614 <prvResetNextTaskUnblockTime+0x3c>)
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	20000c6c 	.word	0x20000c6c
 8003614:	20000cd4 	.word	0x20000cd4

08003618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800361e:	4b0b      	ldr	r3, [pc, #44]	@ (800364c <xTaskGetSchedulerState+0x34>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003626:	2301      	movs	r3, #1
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e008      	b.n	800363e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <xTaskGetSchedulerState+0x38>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003634:	2302      	movs	r3, #2
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	e001      	b.n	800363e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800363e:	687b      	ldr	r3, [r7, #4]
	}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000cc0 	.word	0x20000cc0
 8003650:	20000cdc 	.word	0x20000cdc

08003654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d058      	beq.n	800371c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800366a:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <xTaskPriorityDisinherit+0xd4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d00b      	beq.n	800368c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60bb      	str	r3, [r7, #8]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	429a      	cmp	r2, r3
 80036c0:	d02c      	beq.n	800371c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d128      	bne.n	800371c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fc54 	bl	8001f7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <xTaskPriorityDisinherit+0xd8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d903      	bls.n	80036fc <xTaskPriorityDisinherit+0xa8>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	4a0c      	ldr	r2, [pc, #48]	@ (800372c <xTaskPriorityDisinherit+0xd8>)
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4a09      	ldr	r2, [pc, #36]	@ (8003730 <xTaskPriorityDisinherit+0xdc>)
 800370a:	441a      	add	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7fe fbd5 	bl	8001ec2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800371c:	697b      	ldr	r3, [r7, #20]
	}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200007e0 	.word	0x200007e0
 800372c:	20000cbc 	.word	0x20000cbc
 8003730:	200007e4 	.word	0x200007e4

08003734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800373e:	4b21      	ldr	r3, [pc, #132]	@ (80037c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003744:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3304      	adds	r3, #4
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fc16 	bl	8001f7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003756:	d10a      	bne.n	800376e <prvAddCurrentTaskToDelayedList+0x3a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4819      	ldr	r0, [pc, #100]	@ (80037cc <prvAddCurrentTaskToDelayedList+0x98>)
 8003768:	f7fe fbab 	bl	8001ec2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800376c:	e026      	b.n	80037bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	429a      	cmp	r2, r3
 8003784:	d209      	bcs.n	800379a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003786:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b0f      	ldr	r3, [pc, #60]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe fbb9 	bl	8001f0a <vListInsert>
}
 8003798:	e010      	b.n	80037bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f7fe fbaf 	bl	8001f0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d202      	bcs.n	80037bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80037b6:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20000cb8 	.word	0x20000cb8
 80037c8:	200007e0 	.word	0x200007e0
 80037cc:	20000ca0 	.word	0x20000ca0
 80037d0:	20000c70 	.word	0x20000c70
 80037d4:	20000c6c 	.word	0x20000c6c
 80037d8:	20000cd4 	.word	0x20000cd4

080037dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037e6:	f000 fb13 	bl	8003e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <xTimerCreateTimerTask+0x84>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d021      	beq.n	8003836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80037fa:	1d3a      	adds	r2, r7, #4
 80037fc:	f107 0108 	add.w	r1, r7, #8
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fb15 	bl	8001e34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	9202      	str	r2, [sp, #8]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	2302      	movs	r3, #2
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	460a      	mov	r2, r1
 800381c:	4911      	ldr	r1, [pc, #68]	@ (8003864 <xTimerCreateTimerTask+0x88>)
 800381e:	4812      	ldr	r0, [pc, #72]	@ (8003868 <xTimerCreateTimerTask+0x8c>)
 8003820:	f7ff f8d0 	bl	80029c4 <xTaskCreateStatic>
 8003824:	4603      	mov	r3, r0
 8003826:	4a11      	ldr	r2, [pc, #68]	@ (800386c <xTimerCreateTimerTask+0x90>)
 8003828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <xTimerCreateTimerTask+0x90>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	613b      	str	r3, [r7, #16]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003854:	697b      	ldr	r3, [r7, #20]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000d10 	.word	0x20000d10
 8003864:	080056b8 	.word	0x080056b8
 8003868:	080039a9 	.word	0x080039a9
 800386c:	20000d14 	.word	0x20000d14

08003870 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	@ 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	623b      	str	r3, [r7, #32]
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80038a0:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <xTimerGenericCommand+0x98>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02a      	beq.n	80038fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	dc18      	bgt.n	80038ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038ba:	f7ff fead 	bl	8003618 <xTaskGetSchedulerState>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d109      	bne.n	80038d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038c4:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <xTimerGenericCommand+0x98>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	f107 0110 	add.w	r1, r7, #16
 80038cc:	2300      	movs	r3, #0
 80038ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d0:	f7fe fc88 	bl	80021e4 <xQueueGenericSend>
 80038d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80038d6:	e012      	b.n	80038fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <xTimerGenericCommand+0x98>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	f107 0110 	add.w	r1, r7, #16
 80038e0:	2300      	movs	r3, #0
 80038e2:	2200      	movs	r2, #0
 80038e4:	f7fe fc7e 	bl	80021e4 <xQueueGenericSend>
 80038e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80038ea:	e008      	b.n	80038fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <xTimerGenericCommand+0x98>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	f107 0110 	add.w	r1, r7, #16
 80038f4:	2300      	movs	r3, #0
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	f7fe fd76 	bl	80023e8 <xQueueGenericSendFromISR>
 80038fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000d10 	.word	0x20000d10

0800390c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <prvProcessExpiredTimer+0x98>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3304      	adds	r3, #4
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fb29 	bl	8001f7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d023      	beq.n	8003980 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	18d1      	adds	r1, r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6978      	ldr	r0, [r7, #20]
 8003946:	f000 f8d5 	bl	8003af4 <prvInsertTimerInActiveList>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	2100      	movs	r1, #0
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7ff ff88 	bl	8003870 <xTimerGenericCommand>
 8003960:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60fb      	str	r3, [r7, #12]
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	4798      	blx	r3
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000d08 	.word	0x20000d08

080039a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f859 	bl	8003a6c <prvGetNextExpireTime>
 80039ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4619      	mov	r1, r3
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f805 	bl	80039d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80039c6:	f000 f8d7 	bl	8003b78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ca:	bf00      	nop
 80039cc:	e7f0      	b.n	80039b0 <prvTimerTask+0x8>
	...

080039d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80039da:	f7ff fa37 	bl	8002e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f866 	bl	8003ab4 <prvSampleTimeNow>
 80039e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d130      	bne.n	8003a52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <prvProcessTimerOrBlockTask+0x3c>
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d806      	bhi.n	8003a0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039fe:	f7ff fa33 	bl	8002e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff81 	bl	800390c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003a0a:	e024      	b.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <prvProcessTimerOrBlockTask+0x90>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <prvProcessTimerOrBlockTask+0x50>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <prvProcessTimerOrBlockTask+0x52>
 8003a20:	2300      	movs	r3, #0
 8003a22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <prvProcessTimerOrBlockTask+0x94>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fe ff93 	bl	800295c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a36:	f7ff fa17 	bl	8002e68 <xTaskResumeAll>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <prvProcessTimerOrBlockTask+0x98>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
}
 8003a50:	e001      	b.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a52:	f7ff fa09 	bl	8002e68 <xTaskResumeAll>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000d0c 	.word	0x20000d0c
 8003a64:	20000d10 	.word	0x20000d10
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a74:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <prvGetNextExpireTime+0x44>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <prvGetNextExpireTime+0x16>
 8003a7e:	2201      	movs	r2, #1
 8003a80:	e000      	b.n	8003a84 <prvGetNextExpireTime+0x18>
 8003a82:	2200      	movs	r2, #0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a90:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <prvGetNextExpireTime+0x44>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e001      	b.n	8003aa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000d08 	.word	0x20000d08

08003ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003abc:	f7ff fa72 	bl	8002fa4 <xTaskGetTickCount>
 8003ac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <prvSampleTimeNow+0x3c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d205      	bcs.n	8003ad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003acc:	f000 f93a 	bl	8003d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ade:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <prvSampleTimeNow+0x3c>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000d18 	.word	0x20000d18

08003af4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d812      	bhi.n	8003b40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e01b      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b2e:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <prvInsertTimerInActiveList+0x7c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7fe f9e6 	bl	8001f0a <vListInsert>
 8003b3e:	e012      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d206      	bcs.n	8003b56 <prvInsertTimerInActiveList+0x62>
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e007      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b56:	4b07      	ldr	r3, [pc, #28]	@ (8003b74 <prvInsertTimerInActiveList+0x80>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe f9d2 	bl	8001f0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000d0c 	.word	0x20000d0c
 8003b74:	20000d08 	.word	0x20000d08

08003b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	@ 0x38
 8003b7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b7e:	e0ce      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da19      	bge.n	8003bba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	3304      	adds	r3, #4
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61fb      	str	r3, [r7, #28]
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	e7fd      	b.n	8003ba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb0:	6850      	ldr	r0, [r2, #4]
 8003bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb4:	6892      	ldr	r2, [r2, #8]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f2c0 80ae 	blt.w	8003d1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe f9d2 	bl	8001f7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bd8:	463b      	mov	r3, r7
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff6a 	bl	8003ab4 <prvSampleTimeNow>
 8003be0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	f200 8097 	bhi.w	8003d18 <prvProcessReceivedCommands+0x1a0>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <prvProcessReceivedCommands+0x78>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c19 	.word	0x08003c19
 8003bfc:	08003c8f 	.word	0x08003c8f
 8003c00:	08003ca3 	.word	0x08003ca3
 8003c04:	08003cef 	.word	0x08003cef
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c19 	.word	0x08003c19
 8003c10:	08003c8f 	.word	0x08003c8f
 8003c14:	08003ca3 	.word	0x08003ca3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	18d1      	adds	r1, r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c38:	f7ff ff5c 	bl	8003af4 <prvInsertTimerInActiveList>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d06c      	beq.n	8003d1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d061      	beq.n	8003d1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	441a      	add	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c6a:	f7ff fe01 	bl	8003870 <xTimerGenericCommand>
 8003c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d152      	bne.n	8003d1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61bb      	str	r3, [r7, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ca0:	e03d      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	617b      	str	r3, [r7, #20]
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	e7fd      	b.n	8003cd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	18d1      	adds	r1, r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ce8:	f7ff ff04 	bl	8003af4 <prvInsertTimerInActiveList>
					break;
 8003cec:	e017      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cfe:	f000 fbeb 	bl	80044d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003d02:	e00c      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003d16:	e002      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <prvProcessReceivedCommands+0x1a6>
					break;
 8003d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d1e:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <prvProcessReceivedCommands+0x1c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1d39      	adds	r1, r7, #4
 8003d24:	2200      	movs	r2, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fbfc 	bl	8002524 <xQueueReceive>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f47f af26 	bne.w	8003b80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3730      	adds	r7, #48	@ 0x30
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000d10 	.word	0x20000d10

08003d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d4a:	e049      	b.n	8003de0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d56:	4b2c      	ldr	r3, [pc, #176]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe f909 	bl	8001f7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02f      	beq.n	8003de0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d90e      	bls.n	8003db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fe f8ae 	bl	8001f0a <vListInsert>
 8003dae:	e017      	b.n	8003de0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	2100      	movs	r1, #0
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff fd58 	bl	8003870 <xTimerGenericCommand>
 8003dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	603b      	str	r3, [r7, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1b0      	bne.n	8003d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <prvSwitchTimerLists+0xc8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <prvSwitchTimerLists+0xc4>)
 8003df6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003df8:	4a04      	ldr	r2, [pc, #16]	@ (8003e0c <prvSwitchTimerLists+0xc8>)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6013      	str	r3, [r2, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000d08 	.word	0x20000d08
 8003e0c:	20000d0c 	.word	0x20000d0c

08003e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e16:	f000 f96f 	bl	80040f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <prvCheckForValidListAndQueue+0x60>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d120      	bne.n	8003e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e22:	4814      	ldr	r0, [pc, #80]	@ (8003e74 <prvCheckForValidListAndQueue+0x64>)
 8003e24:	f7fe f820 	bl	8001e68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e28:	4813      	ldr	r0, [pc, #76]	@ (8003e78 <prvCheckForValidListAndQueue+0x68>)
 8003e2a:	f7fe f81d 	bl	8001e68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <prvCheckForValidListAndQueue+0x6c>)
 8003e30:	4a10      	ldr	r2, [pc, #64]	@ (8003e74 <prvCheckForValidListAndQueue+0x64>)
 8003e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <prvCheckForValidListAndQueue+0x70>)
 8003e36:	4a10      	ldr	r2, [pc, #64]	@ (8003e78 <prvCheckForValidListAndQueue+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <prvCheckForValidListAndQueue+0x74>)
 8003e40:	4a11      	ldr	r2, [pc, #68]	@ (8003e88 <prvCheckForValidListAndQueue+0x78>)
 8003e42:	2110      	movs	r1, #16
 8003e44:	200a      	movs	r0, #10
 8003e46:	f7fe f92d 	bl	80020a4 <xQueueGenericCreateStatic>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4a08      	ldr	r2, [pc, #32]	@ (8003e70 <prvCheckForValidListAndQueue+0x60>)
 8003e4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e50:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <prvCheckForValidListAndQueue+0x60>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <prvCheckForValidListAndQueue+0x60>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	490b      	ldr	r1, [pc, #44]	@ (8003e8c <prvCheckForValidListAndQueue+0x7c>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fd52 	bl	8002908 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e64:	f000 f97a 	bl	800415c <vPortExitCritical>
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000d10 	.word	0x20000d10
 8003e74:	20000ce0 	.word	0x20000ce0
 8003e78:	20000cf4 	.word	0x20000cf4
 8003e7c:	20000d08 	.word	0x20000d08
 8003e80:	20000d0c 	.word	0x20000d0c
 8003e84:	20000dbc 	.word	0x20000dbc
 8003e88:	20000d1c 	.word	0x20000d1c
 8003e8c:	080056c0 	.word	0x080056c0

08003e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b04      	subs	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef4 <pxPortInitialiseStack+0x64>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b14      	subs	r3, #20
 8003eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b04      	subs	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f06f 0202 	mvn.w	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b20      	subs	r3, #32
 8003ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	08003ef9 	.word	0x08003ef9

08003ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f02:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <prvTaskExitError+0x58>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0a:	d00b      	beq.n	8003f24 <prvTaskExitError+0x2c>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60fb      	str	r3, [r7, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <prvTaskExitError+0x28>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60bb      	str	r3, [r7, #8]
}
 8003f36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f38:	bf00      	nop
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0fc      	beq.n	8003f3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000010 	.word	0x20000010
	...

08003f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <pxCurrentTCBConst2>)
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	f380 8809 	msr	PSP, r0
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8811 	msr	BASEPRI, r0
 8003f7a:	4770      	bx	lr
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst2>:
 8003f80:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f88:	4808      	ldr	r0, [pc, #32]	@ (8003fac <prvPortStartFirstTask+0x24>)
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f380 8808 	msr	MSP, r0
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8814 	msr	CONTROL, r0
 8003f9a:	b662      	cpsie	i
 8003f9c:	b661      	cpsie	f
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	df00      	svc	0
 8003fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003faa:	bf00      	nop
 8003fac:	e000ed08 	.word	0xe000ed08

08003fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fb6:	4b47      	ldr	r3, [pc, #284]	@ (80040d4 <xPortStartScheduler+0x124>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a47      	ldr	r2, [pc, #284]	@ (80040d8 <xPortStartScheduler+0x128>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10b      	bne.n	8003fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80040d4 <xPortStartScheduler+0x124>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80040dc <xPortStartScheduler+0x12c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10b      	bne.n	8003ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	613b      	str	r3, [r7, #16]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ffa:	4b39      	ldr	r3, [pc, #228]	@ (80040e0 <xPortStartScheduler+0x130>)
 8003ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	22ff      	movs	r2, #255	@ 0xff
 800400a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b31      	ldr	r3, [pc, #196]	@ (80040e4 <xPortStartScheduler+0x134>)
 8004020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004022:	4b31      	ldr	r3, [pc, #196]	@ (80040e8 <xPortStartScheduler+0x138>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004028:	e009      	b.n	800403e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800402a:	4b2f      	ldr	r3, [pc, #188]	@ (80040e8 <xPortStartScheduler+0x138>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a2d      	ldr	r2, [pc, #180]	@ (80040e8 <xPortStartScheduler+0x138>)
 8004032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d0ef      	beq.n	800402a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800404a:	4b27      	ldr	r3, [pc, #156]	@ (80040e8 <xPortStartScheduler+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00b      	beq.n	800406e <xPortStartScheduler+0xbe>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	e7fd      	b.n	800406a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <xPortStartScheduler+0x138>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <xPortStartScheduler+0x138>)
 8004076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004078:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <xPortStartScheduler+0x138>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <xPortStartScheduler+0x138>)
 8004082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800408c:	4b17      	ldr	r3, [pc, #92]	@ (80040ec <xPortStartScheduler+0x13c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <xPortStartScheduler+0x13c>)
 8004092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004098:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <xPortStartScheduler+0x13c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <xPortStartScheduler+0x13c>)
 800409e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040a4:	f000 f8da 	bl	800425c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <xPortStartScheduler+0x140>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040ae:	f000 f8f9 	bl	80042a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040b2:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <xPortStartScheduler+0x144>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0f      	ldr	r2, [pc, #60]	@ (80040f4 <xPortStartScheduler+0x144>)
 80040b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80040bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040be:	f7ff ff63 	bl	8003f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040c2:	f7ff f839 	bl	8003138 <vTaskSwitchContext>
	prvTaskExitError();
 80040c6:	f7ff ff17 	bl	8003ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	e000ed00 	.word	0xe000ed00
 80040d8:	410fc271 	.word	0x410fc271
 80040dc:	410fc270 	.word	0x410fc270
 80040e0:	e000e400 	.word	0xe000e400
 80040e4:	20000e0c 	.word	0x20000e0c
 80040e8:	20000e10 	.word	0x20000e10
 80040ec:	e000ed20 	.word	0xe000ed20
 80040f0:	20000010 	.word	0x20000010
 80040f4:	e000ef34 	.word	0xe000ef34

080040f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	607b      	str	r3, [r7, #4]
}
 8004110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <vPortEnterCritical+0x5c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <vPortEnterCritical+0x5c>)
 800411a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800411c:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <vPortEnterCritical+0x5c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d110      	bne.n	8004146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <vPortEnterCritical+0x60>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <vPortEnterCritical+0x4e>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	e7fd      	b.n	8004142 <vPortEnterCritical+0x4a>
	}
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000010 	.word	0x20000010
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <vPortExitCritical+0x50>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <vPortExitCritical+0x26>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <vPortExitCritical+0x50>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	4a08      	ldr	r2, [pc, #32]	@ (80041ac <vPortExitCritical+0x50>)
 800418a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <vPortExitCritical+0x50>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <vPortExitCritical+0x44>
 8004194:	2300      	movs	r3, #0
 8004196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f383 8811 	msr	BASEPRI, r3
}
 800419e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000010 	.word	0x20000010

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <pxCurrentTCBConst>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	f01e 0f10 	tst.w	lr, #16
 80041c0:	bf08      	it	eq
 80041c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	6010      	str	r0, [r2, #0]
 80041cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041d4:	f380 8811 	msr	BASEPRI, r0
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f7fe ffaa 	bl	8003138 <vTaskSwitchContext>
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f380 8811 	msr	BASEPRI, r0
 80041ec:	bc09      	pop	{r0, r3}
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6808      	ldr	r0, [r1, #0]
 80041f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f6:	f01e 0f10 	tst.w	lr, #16
 80041fa:	bf08      	it	eq
 80041fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004200:	f380 8809 	msr	PSP, r0
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst>:
 8004210:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
}
 8004230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004232:	f7fe fec7 	bl	8002fc4 <xTaskIncrementTick>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <xPortSysTickHandler+0x40>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f383 8811 	msr	BASEPRI, r3
}
 800424e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <vPortSetupTimerInterrupt+0x38>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <vPortSetupTimerInterrupt+0x3c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <vPortSetupTimerInterrupt+0x40>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <vPortSetupTimerInterrupt+0x44>)
 800427a:	3b01      	subs	r3, #1
 800427c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800427e:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000e010 	.word	0xe000e010
 8004294:	e000e018 	.word	0xe000e018
 8004298:	20000004 	.word	0x20000004
 800429c:	10624dd3 	.word	0x10624dd3
 80042a0:	e000e014 	.word	0xe000e014

080042a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80042b4 <vPortEnableVFP+0x10>
 80042a8:	6801      	ldr	r1, [r0, #0]
 80042aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80042ae:	6001      	str	r1, [r0, #0]
 80042b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042b2:	bf00      	nop
 80042b4:	e000ed88 	.word	0xe000ed88

080042b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042be:	f3ef 8305 	mrs	r3, IPSR
 80042c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d915      	bls.n	80042f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ca:	4a18      	ldr	r2, [pc, #96]	@ (800432c <vPortValidateInterruptPriority+0x74>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042d4:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <vPortValidateInterruptPriority+0x78>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	7afa      	ldrb	r2, [r7, #11]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20b      	bcs.n	80042f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <vPortValidateInterruptPriority+0x7c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <vPortValidateInterruptPriority+0x80>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d90b      	bls.n	800431e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	603b      	str	r3, [r7, #0]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <vPortValidateInterruptPriority+0x62>
	}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e3f0 	.word	0xe000e3f0
 8004330:	20000e0c 	.word	0x20000e0c
 8004334:	e000ed0c 	.word	0xe000ed0c
 8004338:	20000e10 	.word	0x20000e10

0800433c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	@ 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004348:	f7fe fd80 	bl	8002e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800434c:	4b5c      	ldr	r3, [pc, #368]	@ (80044c0 <pvPortMalloc+0x184>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004354:	f000 f924 	bl	80045a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004358:	4b5a      	ldr	r3, [pc, #360]	@ (80044c4 <pvPortMalloc+0x188>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8095 	bne.w	8004490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01e      	beq.n	80043aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800436c:	2208      	movs	r2, #8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d015      	beq.n	80043aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f023 0307 	bic.w	r3, r3, #7
 8004384:	3308      	adds	r3, #8
 8004386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <pvPortMalloc+0x6e>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	617b      	str	r3, [r7, #20]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d06f      	beq.n	8004490 <pvPortMalloc+0x154>
 80043b0:	4b45      	ldr	r3, [pc, #276]	@ (80044c8 <pvPortMalloc+0x18c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d86a      	bhi.n	8004490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043ba:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <pvPortMalloc+0x190>)
 80043bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043be:	4b43      	ldr	r3, [pc, #268]	@ (80044cc <pvPortMalloc+0x190>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c4:	e004      	b.n	80043d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d903      	bls.n	80043e2 <pvPortMalloc+0xa6>
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f1      	bne.n	80043c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043e2:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <pvPortMalloc+0x184>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d051      	beq.n	8004490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4413      	add	r3, r2
 80043f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	2308      	movs	r3, #8
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	429a      	cmp	r2, r3
 800440c:	d920      	bls.n	8004450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800440e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <pvPortMalloc+0xfc>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	613b      	str	r3, [r7, #16]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	f000 f90a 	bl	8004664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004450:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <pvPortMalloc+0x18c>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <pvPortMalloc+0x18c>)
 800445c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800445e:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <pvPortMalloc+0x18c>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <pvPortMalloc+0x194>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d203      	bcs.n	8004472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800446a:	4b17      	ldr	r3, [pc, #92]	@ (80044c8 <pvPortMalloc+0x18c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <pvPortMalloc+0x194>)
 8004470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <pvPortMalloc+0x188>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	431a      	orrs	r2, r3
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004486:	4b13      	ldr	r3, [pc, #76]	@ (80044d4 <pvPortMalloc+0x198>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	4a11      	ldr	r2, [pc, #68]	@ (80044d4 <pvPortMalloc+0x198>)
 800448e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004490:	f7fe fcea 	bl	8002e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <pvPortMalloc+0x17a>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	e7fd      	b.n	80044b2 <pvPortMalloc+0x176>
	return pvReturn;
 80044b6:	69fb      	ldr	r3, [r7, #28]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	@ 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20004a1c 	.word	0x20004a1c
 80044c4:	20004a30 	.word	0x20004a30
 80044c8:	20004a20 	.word	0x20004a20
 80044cc:	20004a14 	.word	0x20004a14
 80044d0:	20004a24 	.word	0x20004a24
 80044d4:	20004a28 	.word	0x20004a28

080044d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d04f      	beq.n	800458a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ea:	2308      	movs	r3, #8
 80044ec:	425b      	negs	r3, r3
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	4b25      	ldr	r3, [pc, #148]	@ (8004594 <vPortFree+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <vPortFree+0x46>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60fb      	str	r3, [r7, #12]
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e7fd      	b.n	800451a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <vPortFree+0x66>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <vPortFree+0xbc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01e      	beq.n	800458a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11a      	bne.n	800458a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <vPortFree+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	43db      	mvns	r3, r3
 800455e:	401a      	ands	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004564:	f7fe fc72 	bl	8002e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <vPortFree+0xc0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4413      	add	r3, r2
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <vPortFree+0xc0>)
 8004574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f000 f874 	bl	8004664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800457c:	4b07      	ldr	r3, [pc, #28]	@ (800459c <vPortFree+0xc4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a06      	ldr	r2, [pc, #24]	@ (800459c <vPortFree+0xc4>)
 8004584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004586:	f7fe fc6f 	bl	8002e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20004a30 	.word	0x20004a30
 8004598:	20004a20 	.word	0x20004a20
 800459c:	20004a2c 	.word	0x20004a2c

080045a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80045aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045ac:	4b27      	ldr	r3, [pc, #156]	@ (800464c <prvHeapInit+0xac>)
 80045ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3307      	adds	r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <prvHeapInit+0xac>)
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <prvHeapInit+0xb0>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045de:	4b1c      	ldr	r3, [pc, #112]	@ (8004650 <prvHeapInit+0xb0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045ec:	2208      	movs	r2, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <prvHeapInit+0xb4>)
 8004600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004602:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <prvHeapInit+0xb4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <prvHeapInit+0xb4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004620:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <prvHeapInit+0xb4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <prvHeapInit+0xb8>)
 800462e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a09      	ldr	r2, [pc, #36]	@ (800465c <prvHeapInit+0xbc>)
 8004636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <prvHeapInit+0xc0>)
 800463a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800463e:	601a      	str	r2, [r3, #0]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000e14 	.word	0x20000e14
 8004650:	20004a14 	.word	0x20004a14
 8004654:	20004a1c 	.word	0x20004a1c
 8004658:	20004a24 	.word	0x20004a24
 800465c:	20004a20 	.word	0x20004a20
 8004660:	20004a30 	.word	0x20004a30

08004664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800466c:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <prvInsertBlockIntoFreeList+0xac>)
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e002      	b.n	8004678 <prvInsertBlockIntoFreeList+0x14>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d8f7      	bhi.n	8004672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d108      	bne.n	80046a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	441a      	add	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d118      	bne.n	80046ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <prvInsertBlockIntoFreeList+0xb0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d00d      	beq.n	80046e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e008      	b.n	80046f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <prvInsertBlockIntoFreeList+0xb0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e003      	b.n	80046f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d002      	beq.n	8004702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20004a14 	.word	0x20004a14
 8004714:	20004a1c 	.word	0x20004a1c

08004718 <std>:
 8004718:	2300      	movs	r3, #0
 800471a:	b510      	push	{r4, lr}
 800471c:	4604      	mov	r4, r0
 800471e:	e9c0 3300 	strd	r3, r3, [r0]
 8004722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004726:	6083      	str	r3, [r0, #8]
 8004728:	8181      	strh	r1, [r0, #12]
 800472a:	6643      	str	r3, [r0, #100]	@ 0x64
 800472c:	81c2      	strh	r2, [r0, #14]
 800472e:	6183      	str	r3, [r0, #24]
 8004730:	4619      	mov	r1, r3
 8004732:	2208      	movs	r2, #8
 8004734:	305c      	adds	r0, #92	@ 0x5c
 8004736:	f000 f9f9 	bl	8004b2c <memset>
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <std+0x58>)
 800473c:	6263      	str	r3, [r4, #36]	@ 0x24
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <std+0x5c>)
 8004740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <std+0x60>)
 8004744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <std+0x64>)
 8004748:	6323      	str	r3, [r4, #48]	@ 0x30
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <std+0x68>)
 800474c:	6224      	str	r4, [r4, #32]
 800474e:	429c      	cmp	r4, r3
 8004750:	d006      	beq.n	8004760 <std+0x48>
 8004752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004756:	4294      	cmp	r4, r2
 8004758:	d002      	beq.n	8004760 <std+0x48>
 800475a:	33d0      	adds	r3, #208	@ 0xd0
 800475c:	429c      	cmp	r4, r3
 800475e:	d105      	bne.n	800476c <std+0x54>
 8004760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	f000 ba58 	b.w	8004c1c <__retarget_lock_init_recursive>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	bf00      	nop
 8004770:	0800497d 	.word	0x0800497d
 8004774:	0800499f 	.word	0x0800499f
 8004778:	080049d7 	.word	0x080049d7
 800477c:	080049fb 	.word	0x080049fb
 8004780:	20004a34 	.word	0x20004a34

08004784 <stdio_exit_handler>:
 8004784:	4a02      	ldr	r2, [pc, #8]	@ (8004790 <stdio_exit_handler+0xc>)
 8004786:	4903      	ldr	r1, [pc, #12]	@ (8004794 <stdio_exit_handler+0x10>)
 8004788:	4803      	ldr	r0, [pc, #12]	@ (8004798 <stdio_exit_handler+0x14>)
 800478a:	f000 b869 	b.w	8004860 <_fwalk_sglue>
 800478e:	bf00      	nop
 8004790:	20000014 	.word	0x20000014
 8004794:	080054d5 	.word	0x080054d5
 8004798:	20000024 	.word	0x20000024

0800479c <cleanup_stdio>:
 800479c:	6841      	ldr	r1, [r0, #4]
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <cleanup_stdio+0x34>)
 80047a0:	4299      	cmp	r1, r3
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
 80047a6:	d001      	beq.n	80047ac <cleanup_stdio+0x10>
 80047a8:	f000 fe94 	bl	80054d4 <_fflush_r>
 80047ac:	68a1      	ldr	r1, [r4, #8]
 80047ae:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <cleanup_stdio+0x38>)
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <cleanup_stdio+0x1e>
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 fe8d 	bl	80054d4 <_fflush_r>
 80047ba:	68e1      	ldr	r1, [r4, #12]
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <cleanup_stdio+0x3c>)
 80047be:	4299      	cmp	r1, r3
 80047c0:	d004      	beq.n	80047cc <cleanup_stdio+0x30>
 80047c2:	4620      	mov	r0, r4
 80047c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c8:	f000 be84 	b.w	80054d4 <_fflush_r>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	20004a34 	.word	0x20004a34
 80047d4:	20004a9c 	.word	0x20004a9c
 80047d8:	20004b04 	.word	0x20004b04

080047dc <global_stdio_init.part.0>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <global_stdio_init.part.0+0x30>)
 80047e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004810 <global_stdio_init.part.0+0x34>)
 80047e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004814 <global_stdio_init.part.0+0x38>)
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	4620      	mov	r0, r4
 80047e8:	2200      	movs	r2, #0
 80047ea:	2104      	movs	r1, #4
 80047ec:	f7ff ff94 	bl	8004718 <std>
 80047f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047f4:	2201      	movs	r2, #1
 80047f6:	2109      	movs	r1, #9
 80047f8:	f7ff ff8e 	bl	8004718 <std>
 80047fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004800:	2202      	movs	r2, #2
 8004802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004806:	2112      	movs	r1, #18
 8004808:	f7ff bf86 	b.w	8004718 <std>
 800480c:	20004b6c 	.word	0x20004b6c
 8004810:	20004a34 	.word	0x20004a34
 8004814:	08004785 	.word	0x08004785

08004818 <__sfp_lock_acquire>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__sfp_lock_acquire+0x8>)
 800481a:	f000 ba00 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	20004b75 	.word	0x20004b75

08004824 <__sfp_lock_release>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__sfp_lock_release+0x8>)
 8004826:	f000 b9fb 	b.w	8004c20 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	20004b75 	.word	0x20004b75

08004830 <__sinit>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	f7ff fff0 	bl	8004818 <__sfp_lock_acquire>
 8004838:	6a23      	ldr	r3, [r4, #32]
 800483a:	b11b      	cbz	r3, 8004844 <__sinit+0x14>
 800483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004840:	f7ff bff0 	b.w	8004824 <__sfp_lock_release>
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <__sinit+0x28>)
 8004846:	6223      	str	r3, [r4, #32]
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <__sinit+0x2c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f5      	bne.n	800483c <__sinit+0xc>
 8004850:	f7ff ffc4 	bl	80047dc <global_stdio_init.part.0>
 8004854:	e7f2      	b.n	800483c <__sinit+0xc>
 8004856:	bf00      	nop
 8004858:	0800479d 	.word	0x0800479d
 800485c:	20004b6c 	.word	0x20004b6c

08004860 <_fwalk_sglue>:
 8004860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004864:	4607      	mov	r7, r0
 8004866:	4688      	mov	r8, r1
 8004868:	4614      	mov	r4, r2
 800486a:	2600      	movs	r6, #0
 800486c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004870:	f1b9 0901 	subs.w	r9, r9, #1
 8004874:	d505      	bpl.n	8004882 <_fwalk_sglue+0x22>
 8004876:	6824      	ldr	r4, [r4, #0]
 8004878:	2c00      	cmp	r4, #0
 800487a:	d1f7      	bne.n	800486c <_fwalk_sglue+0xc>
 800487c:	4630      	mov	r0, r6
 800487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004882:	89ab      	ldrh	r3, [r5, #12]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d907      	bls.n	8004898 <_fwalk_sglue+0x38>
 8004888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800488c:	3301      	adds	r3, #1
 800488e:	d003      	beq.n	8004898 <_fwalk_sglue+0x38>
 8004890:	4629      	mov	r1, r5
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	4306      	orrs	r6, r0
 8004898:	3568      	adds	r5, #104	@ 0x68
 800489a:	e7e9      	b.n	8004870 <_fwalk_sglue+0x10>

0800489c <iprintf>:
 800489c:	b40f      	push	{r0, r1, r2, r3}
 800489e:	b507      	push	{r0, r1, r2, lr}
 80048a0:	4906      	ldr	r1, [pc, #24]	@ (80048bc <iprintf+0x20>)
 80048a2:	ab04      	add	r3, sp, #16
 80048a4:	6808      	ldr	r0, [r1, #0]
 80048a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048aa:	6881      	ldr	r1, [r0, #8]
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	f000 fae9 	bl	8004e84 <_vfiprintf_r>
 80048b2:	b003      	add	sp, #12
 80048b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b8:	b004      	add	sp, #16
 80048ba:	4770      	bx	lr
 80048bc:	20000020 	.word	0x20000020

080048c0 <_puts_r>:
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	6884      	ldr	r4, [r0, #8]
 80048c6:	4605      	mov	r5, r0
 80048c8:	460e      	mov	r6, r1
 80048ca:	b90b      	cbnz	r3, 80048d0 <_puts_r+0x10>
 80048cc:	f7ff ffb0 	bl	8004830 <__sinit>
 80048d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d2:	07db      	lsls	r3, r3, #31
 80048d4:	d405      	bmi.n	80048e2 <_puts_r+0x22>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d402      	bmi.n	80048e2 <_puts_r+0x22>
 80048dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048de:	f000 f99e 	bl	8004c1e <__retarget_lock_acquire_recursive>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	0719      	lsls	r1, r3, #28
 80048e6:	d502      	bpl.n	80048ee <_puts_r+0x2e>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d135      	bne.n	800495a <_puts_r+0x9a>
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 f8c5 	bl	8004a80 <__swsetup_r>
 80048f6:	b380      	cbz	r0, 800495a <_puts_r+0x9a>
 80048f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80048fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048fe:	07da      	lsls	r2, r3, #31
 8004900:	d405      	bmi.n	800490e <_puts_r+0x4e>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	059b      	lsls	r3, r3, #22
 8004906:	d402      	bmi.n	800490e <_puts_r+0x4e>
 8004908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490a:	f000 f989 	bl	8004c20 <__retarget_lock_release_recursive>
 800490e:	4628      	mov	r0, r5
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	2b00      	cmp	r3, #0
 8004914:	da04      	bge.n	8004920 <_puts_r+0x60>
 8004916:	69a2      	ldr	r2, [r4, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	dc17      	bgt.n	800494c <_puts_r+0x8c>
 800491c:	290a      	cmp	r1, #10
 800491e:	d015      	beq.n	800494c <_puts_r+0x8c>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	7019      	strb	r1, [r3, #0]
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800492e:	3b01      	subs	r3, #1
 8004930:	60a3      	str	r3, [r4, #8]
 8004932:	2900      	cmp	r1, #0
 8004934:	d1ed      	bne.n	8004912 <_puts_r+0x52>
 8004936:	2b00      	cmp	r3, #0
 8004938:	da11      	bge.n	800495e <_puts_r+0x9e>
 800493a:	4622      	mov	r2, r4
 800493c:	210a      	movs	r1, #10
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f85f 	bl	8004a02 <__swbuf_r>
 8004944:	3001      	adds	r0, #1
 8004946:	d0d7      	beq.n	80048f8 <_puts_r+0x38>
 8004948:	250a      	movs	r5, #10
 800494a:	e7d7      	b.n	80048fc <_puts_r+0x3c>
 800494c:	4622      	mov	r2, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f857 	bl	8004a02 <__swbuf_r>
 8004954:	3001      	adds	r0, #1
 8004956:	d1e7      	bne.n	8004928 <_puts_r+0x68>
 8004958:	e7ce      	b.n	80048f8 <_puts_r+0x38>
 800495a:	3e01      	subs	r6, #1
 800495c:	e7e4      	b.n	8004928 <_puts_r+0x68>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	220a      	movs	r2, #10
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e7ee      	b.n	8004948 <_puts_r+0x88>
	...

0800496c <puts>:
 800496c:	4b02      	ldr	r3, [pc, #8]	@ (8004978 <puts+0xc>)
 800496e:	4601      	mov	r1, r0
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f7ff bfa5 	b.w	80048c0 <_puts_r>
 8004976:	bf00      	nop
 8004978:	20000020 	.word	0x20000020

0800497c <__sread>:
 800497c:	b510      	push	{r4, lr}
 800497e:	460c      	mov	r4, r1
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	f000 f8fc 	bl	8004b80 <_read_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	bfab      	itete	ge
 800498c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800498e:	89a3      	ldrhlt	r3, [r4, #12]
 8004990:	181b      	addge	r3, r3, r0
 8004992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004996:	bfac      	ite	ge
 8004998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800499a:	81a3      	strhlt	r3, [r4, #12]
 800499c:	bd10      	pop	{r4, pc}

0800499e <__swrite>:
 800499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	461f      	mov	r7, r3
 80049a4:	898b      	ldrh	r3, [r1, #12]
 80049a6:	05db      	lsls	r3, r3, #23
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	4616      	mov	r6, r2
 80049ae:	d505      	bpl.n	80049bc <__swrite+0x1e>
 80049b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b4:	2302      	movs	r3, #2
 80049b6:	2200      	movs	r2, #0
 80049b8:	f000 f8d0 	bl	8004b5c <_lseek_r>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	4632      	mov	r2, r6
 80049ca:	463b      	mov	r3, r7
 80049cc:	4628      	mov	r0, r5
 80049ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d2:	f000 b8e7 	b.w	8004ba4 <_write_r>

080049d6 <__sseek>:
 80049d6:	b510      	push	{r4, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049de:	f000 f8bd 	bl	8004b5c <_lseek_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	bf15      	itete	ne
 80049e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049f2:	81a3      	strheq	r3, [r4, #12]
 80049f4:	bf18      	it	ne
 80049f6:	81a3      	strhne	r3, [r4, #12]
 80049f8:	bd10      	pop	{r4, pc}

080049fa <__sclose>:
 80049fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fe:	f000 b89d 	b.w	8004b3c <_close_r>

08004a02 <__swbuf_r>:
 8004a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a04:	460e      	mov	r6, r1
 8004a06:	4614      	mov	r4, r2
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <__swbuf_r+0x12>
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <__swbuf_r+0x12>
 8004a10:	f7ff ff0e 	bl	8004830 <__sinit>
 8004a14:	69a3      	ldr	r3, [r4, #24]
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	071a      	lsls	r2, r3, #28
 8004a1c:	d501      	bpl.n	8004a22 <__swbuf_r+0x20>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	b943      	cbnz	r3, 8004a34 <__swbuf_r+0x32>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f82b 	bl	8004a80 <__swsetup_r>
 8004a2a:	b118      	cbz	r0, 8004a34 <__swbuf_r+0x32>
 8004a2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004a30:	4638      	mov	r0, r7
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6922      	ldr	r2, [r4, #16]
 8004a38:	1a98      	subs	r0, r3, r2
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	b2f6      	uxtb	r6, r6
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	4637      	mov	r7, r6
 8004a42:	dc05      	bgt.n	8004a50 <__swbuf_r+0x4e>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fd44 	bl	80054d4 <_fflush_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d1ed      	bne.n	8004a2c <__swbuf_r+0x2a>
 8004a50:	68a3      	ldr	r3, [r4, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	701e      	strb	r6, [r3, #0]
 8004a5e:	6962      	ldr	r2, [r4, #20]
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d004      	beq.n	8004a70 <__swbuf_r+0x6e>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	07db      	lsls	r3, r3, #31
 8004a6a:	d5e1      	bpl.n	8004a30 <__swbuf_r+0x2e>
 8004a6c:	2e0a      	cmp	r6, #10
 8004a6e:	d1df      	bne.n	8004a30 <__swbuf_r+0x2e>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 fd2e 	bl	80054d4 <_fflush_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d0d9      	beq.n	8004a30 <__swbuf_r+0x2e>
 8004a7c:	e7d6      	b.n	8004a2c <__swbuf_r+0x2a>
	...

08004a80 <__swsetup_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4b29      	ldr	r3, [pc, #164]	@ (8004b28 <__swsetup_r+0xa8>)
 8004a84:	4605      	mov	r5, r0
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	460c      	mov	r4, r1
 8004a8a:	b118      	cbz	r0, 8004a94 <__swsetup_r+0x14>
 8004a8c:	6a03      	ldr	r3, [r0, #32]
 8004a8e:	b90b      	cbnz	r3, 8004a94 <__swsetup_r+0x14>
 8004a90:	f7ff fece 	bl	8004830 <__sinit>
 8004a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	d422      	bmi.n	8004ae2 <__swsetup_r+0x62>
 8004a9c:	06da      	lsls	r2, r3, #27
 8004a9e:	d407      	bmi.n	8004ab0 <__swsetup_r+0x30>
 8004aa0:	2209      	movs	r2, #9
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aae:	e033      	b.n	8004b18 <__swsetup_r+0x98>
 8004ab0:	0758      	lsls	r0, r3, #29
 8004ab2:	d512      	bpl.n	8004ada <__swsetup_r+0x5a>
 8004ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ab6:	b141      	cbz	r1, 8004aca <__swsetup_r+0x4a>
 8004ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d002      	beq.n	8004ac6 <__swsetup_r+0x46>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 f8bd 	bl	8004c40 <_free_r>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	b94b      	cbnz	r3, 8004afa <__swsetup_r+0x7a>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af0:	d003      	beq.n	8004afa <__swsetup_r+0x7a>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 fd3b 	bl	8005570 <__smakebuf_r>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	f013 0201 	ands.w	r2, r3, #1
 8004b02:	d00a      	beq.n	8004b1a <__swsetup_r+0x9a>
 8004b04:	2200      	movs	r2, #0
 8004b06:	60a2      	str	r2, [r4, #8]
 8004b08:	6962      	ldr	r2, [r4, #20]
 8004b0a:	4252      	negs	r2, r2
 8004b0c:	61a2      	str	r2, [r4, #24]
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	b942      	cbnz	r2, 8004b24 <__swsetup_r+0xa4>
 8004b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b16:	d1c5      	bne.n	8004aa4 <__swsetup_r+0x24>
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	0799      	lsls	r1, r3, #30
 8004b1c:	bf58      	it	pl
 8004b1e:	6962      	ldrpl	r2, [r4, #20]
 8004b20:	60a2      	str	r2, [r4, #8]
 8004b22:	e7f4      	b.n	8004b0e <__swsetup_r+0x8e>
 8004b24:	2000      	movs	r0, #0
 8004b26:	e7f7      	b.n	8004b18 <__swsetup_r+0x98>
 8004b28:	20000020 	.word	0x20000020

08004b2c <memset>:
 8004b2c:	4402      	add	r2, r0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <_close_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d06      	ldr	r5, [pc, #24]	@ (8004b58 <_close_r+0x1c>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fb ff6f 	bl	8000a2a <_close>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_close_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_close_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20004b70 	.word	0x20004b70

08004b5c <_lseek_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d07      	ldr	r5, [pc, #28]	@ (8004b7c <_lseek_r+0x20>)
 8004b60:	4604      	mov	r4, r0
 8004b62:	4608      	mov	r0, r1
 8004b64:	4611      	mov	r1, r2
 8004b66:	2200      	movs	r2, #0
 8004b68:	602a      	str	r2, [r5, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7fb ff84 	bl	8000a78 <_lseek>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_lseek_r+0x1e>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_lseek_r+0x1e>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	20004b70 	.word	0x20004b70

08004b80 <_read_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	4d07      	ldr	r5, [pc, #28]	@ (8004ba0 <_read_r+0x20>)
 8004b84:	4604      	mov	r4, r0
 8004b86:	4608      	mov	r0, r1
 8004b88:	4611      	mov	r1, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	602a      	str	r2, [r5, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f7fb ff12 	bl	80009b8 <_read>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_read_r+0x1e>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_read_r+0x1e>
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	20004b70 	.word	0x20004b70

08004ba4 <_write_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4d07      	ldr	r5, [pc, #28]	@ (8004bc4 <_write_r+0x20>)
 8004ba8:	4604      	mov	r4, r0
 8004baa:	4608      	mov	r0, r1
 8004bac:	4611      	mov	r1, r2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	602a      	str	r2, [r5, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7fb ff1d 	bl	80009f2 <_write>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_write_r+0x1e>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_write_r+0x1e>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20004b70 	.word	0x20004b70

08004bc8 <__errno>:
 8004bc8:	4b01      	ldr	r3, [pc, #4]	@ (8004bd0 <__errno+0x8>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000020 	.word	0x20000020

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c0c <__libc_init_array+0x38>)
 8004bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c10 <__libc_init_array+0x3c>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	2600      	movs	r6, #0
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c14 <__libc_init_array+0x40>)
 8004be6:	4c0c      	ldr	r4, [pc, #48]	@ (8004c18 <__libc_init_array+0x44>)
 8004be8:	f000 fd30 	bl	800564c <_init>
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08005764 	.word	0x08005764
 8004c10:	08005764 	.word	0x08005764
 8004c14:	08005764 	.word	0x08005764
 8004c18:	08005768 	.word	0x08005768

08004c1c <__retarget_lock_init_recursive>:
 8004c1c:	4770      	bx	lr

08004c1e <__retarget_lock_acquire_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_release_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <memcpy>:
 8004c22:	440a      	add	r2, r1
 8004c24:	4291      	cmp	r1, r2
 8004c26:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004c2a:	d100      	bne.n	8004c2e <memcpy+0xc>
 8004c2c:	4770      	bx	lr
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c38:	4291      	cmp	r1, r2
 8004c3a:	d1f9      	bne.n	8004c30 <memcpy+0xe>
 8004c3c:	bd10      	pop	{r4, pc}
	...

08004c40 <_free_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4605      	mov	r5, r0
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d041      	beq.n	8004ccc <_free_r+0x8c>
 8004c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4c:	1f0c      	subs	r4, r1, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bfb8      	it	lt
 8004c52:	18e4      	addlt	r4, r4, r3
 8004c54:	f000 f8e0 	bl	8004e18 <__malloc_lock>
 8004c58:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <_free_r+0x90>)
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	b933      	cbnz	r3, 8004c6c <_free_r+0x2c>
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	4628      	mov	r0, r5
 8004c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c68:	f000 b8dc 	b.w	8004e24 <__malloc_unlock>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d908      	bls.n	8004c82 <_free_r+0x42>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	1821      	adds	r1, r4, r0
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf01      	itttt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	1809      	addeq	r1, r1, r0
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	e7ed      	b.n	8004c5e <_free_r+0x1e>
 8004c82:	461a      	mov	r2, r3
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b10b      	cbz	r3, 8004c8c <_free_r+0x4c>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d9fa      	bls.n	8004c82 <_free_r+0x42>
 8004c8c:	6811      	ldr	r1, [r2, #0]
 8004c8e:	1850      	adds	r0, r2, r1
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d10b      	bne.n	8004cac <_free_r+0x6c>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	4401      	add	r1, r0
 8004c98:	1850      	adds	r0, r2, r1
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	d1e0      	bne.n	8004c62 <_free_r+0x22>
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	6053      	str	r3, [r2, #4]
 8004ca6:	4408      	add	r0, r1
 8004ca8:	6010      	str	r0, [r2, #0]
 8004caa:	e7da      	b.n	8004c62 <_free_r+0x22>
 8004cac:	d902      	bls.n	8004cb4 <_free_r+0x74>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	e7d6      	b.n	8004c62 <_free_r+0x22>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	bf04      	itt	eq
 8004cbc:	6819      	ldreq	r1, [r3, #0]
 8004cbe:	685b      	ldreq	r3, [r3, #4]
 8004cc0:	6063      	str	r3, [r4, #4]
 8004cc2:	bf04      	itt	eq
 8004cc4:	1809      	addeq	r1, r1, r0
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	6054      	str	r4, [r2, #4]
 8004cca:	e7ca      	b.n	8004c62 <_free_r+0x22>
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	bf00      	nop
 8004cd0:	20004b7c 	.word	0x20004b7c

08004cd4 <sbrk_aligned>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004d14 <sbrk_aligned+0x40>)
 8004cd8:	460c      	mov	r4, r1
 8004cda:	6831      	ldr	r1, [r6, #0]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	b911      	cbnz	r1, 8004ce6 <sbrk_aligned+0x12>
 8004ce0:	f000 fca4 	bl	800562c <_sbrk_r>
 8004ce4:	6030      	str	r0, [r6, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fc9f 	bl	800562c <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d103      	bne.n	8004cfa <sbrk_aligned+0x26>
 8004cf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d0f8      	beq.n	8004cf6 <sbrk_aligned+0x22>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fc90 	bl	800562c <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1f2      	bne.n	8004cf6 <sbrk_aligned+0x22>
 8004d10:	e7ef      	b.n	8004cf2 <sbrk_aligned+0x1e>
 8004d12:	bf00      	nop
 8004d14:	20004b78 	.word	0x20004b78

08004d18 <_malloc_r>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	1ccd      	adds	r5, r1, #3
 8004d1e:	f025 0503 	bic.w	r5, r5, #3
 8004d22:	3508      	adds	r5, #8
 8004d24:	2d0c      	cmp	r5, #12
 8004d26:	bf38      	it	cc
 8004d28:	250c      	movcc	r5, #12
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	db01      	blt.n	8004d34 <_malloc_r+0x1c>
 8004d30:	42a9      	cmp	r1, r5
 8004d32:	d904      	bls.n	8004d3e <_malloc_r+0x26>
 8004d34:	230c      	movs	r3, #12
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e14 <_malloc_r+0xfc>
 8004d42:	f000 f869 	bl	8004e18 <__malloc_lock>
 8004d46:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	bb44      	cbnz	r4, 8004da0 <_malloc_r+0x88>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff ffbf 	bl	8004cd4 <sbrk_aligned>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	d158      	bne.n	8004e0e <_malloc_r+0xf6>
 8004d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d60:	4627      	mov	r7, r4
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d143      	bne.n	8004dee <_malloc_r+0xd6>
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d04b      	beq.n	8004e02 <_malloc_r+0xea>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	eb04 0903 	add.w	r9, r4, r3
 8004d74:	f000 fc5a 	bl	800562c <_sbrk_r>
 8004d78:	4581      	cmp	r9, r0
 8004d7a:	d142      	bne.n	8004e02 <_malloc_r+0xea>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	1a6d      	subs	r5, r5, r1
 8004d80:	4629      	mov	r1, r5
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ffa6 	bl	8004cd4 <sbrk_aligned>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d03a      	beq.n	8004e02 <_malloc_r+0xea>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	442b      	add	r3, r5
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	f8d8 3000 	ldr.w	r3, [r8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	bb62      	cbnz	r2, 8004df4 <_malloc_r+0xdc>
 8004d9a:	f8c8 7000 	str.w	r7, [r8]
 8004d9e:	e00f      	b.n	8004dc0 <_malloc_r+0xa8>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b52      	subs	r2, r2, r5
 8004da4:	d420      	bmi.n	8004de8 <_malloc_r+0xd0>
 8004da6:	2a0b      	cmp	r2, #11
 8004da8:	d917      	bls.n	8004dda <_malloc_r+0xc2>
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	6059      	strne	r1, [r3, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	bf08      	it	eq
 8004db8:	f8c8 1000 	streq.w	r1, [r8]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f82f 	bl	8004e24 <__malloc_unlock>
 8004dc6:	f104 000b 	add.w	r0, r4, #11
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	f020 0007 	bic.w	r0, r0, #7
 8004dd0:	1ac2      	subs	r2, r0, r3
 8004dd2:	bf1c      	itt	ne
 8004dd4:	1a1b      	subne	r3, r3, r0
 8004dd6:	50a3      	strne	r3, [r4, r2]
 8004dd8:	e7af      	b.n	8004d3a <_malloc_r+0x22>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	bf0c      	ite	eq
 8004de0:	f8c8 2000 	streq.w	r2, [r8]
 8004de4:	605a      	strne	r2, [r3, #4]
 8004de6:	e7eb      	b.n	8004dc0 <_malloc_r+0xa8>
 8004de8:	4623      	mov	r3, r4
 8004dea:	6864      	ldr	r4, [r4, #4]
 8004dec:	e7ae      	b.n	8004d4c <_malloc_r+0x34>
 8004dee:	463c      	mov	r4, r7
 8004df0:	687f      	ldr	r7, [r7, #4]
 8004df2:	e7b6      	b.n	8004d62 <_malloc_r+0x4a>
 8004df4:	461a      	mov	r2, r3
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d1fb      	bne.n	8004df4 <_malloc_r+0xdc>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	e7de      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e02:	230c      	movs	r3, #12
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f80c 	bl	8004e24 <__malloc_unlock>
 8004e0c:	e794      	b.n	8004d38 <_malloc_r+0x20>
 8004e0e:	6005      	str	r5, [r0, #0]
 8004e10:	e7d6      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e12:	bf00      	nop
 8004e14:	20004b7c 	.word	0x20004b7c

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	@ (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f7ff bf00 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20004b74 	.word	0x20004b74

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f7ff befb 	b.w	8004c20 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	20004b74 	.word	0x20004b74

08004e30 <__sfputc_r>:
 8004e30:	6893      	ldr	r3, [r2, #8]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	b410      	push	{r4}
 8004e38:	6093      	str	r3, [r2, #8]
 8004e3a:	da08      	bge.n	8004e4e <__sfputc_r+0x1e>
 8004e3c:	6994      	ldr	r4, [r2, #24]
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	db01      	blt.n	8004e46 <__sfputc_r+0x16>
 8004e42:	290a      	cmp	r1, #10
 8004e44:	d103      	bne.n	8004e4e <__sfputc_r+0x1e>
 8004e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e4a:	f7ff bdda 	b.w	8004a02 <__swbuf_r>
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	1c58      	adds	r0, r3, #1
 8004e52:	6010      	str	r0, [r2, #0]
 8004e54:	7019      	strb	r1, [r3, #0]
 8004e56:	4608      	mov	r0, r1
 8004e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <__sfputs_r>:
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e60:	4606      	mov	r6, r0
 8004e62:	460f      	mov	r7, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	18d5      	adds	r5, r2, r3
 8004e68:	42ac      	cmp	r4, r5
 8004e6a:	d101      	bne.n	8004e70 <__sfputs_r+0x12>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e007      	b.n	8004e80 <__sfputs_r+0x22>
 8004e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e74:	463a      	mov	r2, r7
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7ff ffda 	bl	8004e30 <__sfputc_r>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d1f3      	bne.n	8004e68 <__sfputs_r+0xa>
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e84 <_vfiprintf_r>:
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	460d      	mov	r5, r1
 8004e8a:	b09d      	sub	sp, #116	@ 0x74
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	4698      	mov	r8, r3
 8004e90:	4606      	mov	r6, r0
 8004e92:	b118      	cbz	r0, 8004e9c <_vfiprintf_r+0x18>
 8004e94:	6a03      	ldr	r3, [r0, #32]
 8004e96:	b90b      	cbnz	r3, 8004e9c <_vfiprintf_r+0x18>
 8004e98:	f7ff fcca 	bl	8004830 <__sinit>
 8004e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e9e:	07d9      	lsls	r1, r3, #31
 8004ea0:	d405      	bmi.n	8004eae <_vfiprintf_r+0x2a>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	059a      	lsls	r2, r3, #22
 8004ea6:	d402      	bmi.n	8004eae <_vfiprintf_r+0x2a>
 8004ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eaa:	f7ff feb8 	bl	8004c1e <__retarget_lock_acquire_recursive>
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	071b      	lsls	r3, r3, #28
 8004eb2:	d501      	bpl.n	8004eb8 <_vfiprintf_r+0x34>
 8004eb4:	692b      	ldr	r3, [r5, #16]
 8004eb6:	b99b      	cbnz	r3, 8004ee0 <_vfiprintf_r+0x5c>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff fde0 	bl	8004a80 <__swsetup_r>
 8004ec0:	b170      	cbz	r0, 8004ee0 <_vfiprintf_r+0x5c>
 8004ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ec4:	07dc      	lsls	r4, r3, #31
 8004ec6:	d504      	bpl.n	8004ed2 <_vfiprintf_r+0x4e>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ecc:	b01d      	add	sp, #116	@ 0x74
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	0598      	lsls	r0, r3, #22
 8004ed6:	d4f7      	bmi.n	8004ec8 <_vfiprintf_r+0x44>
 8004ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eda:	f7ff fea1 	bl	8004c20 <__retarget_lock_release_recursive>
 8004ede:	e7f3      	b.n	8004ec8 <_vfiprintf_r+0x44>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eee:	2330      	movs	r3, #48	@ 0x30
 8004ef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80050a0 <_vfiprintf_r+0x21c>
 8004ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ef8:	f04f 0901 	mov.w	r9, #1
 8004efc:	4623      	mov	r3, r4
 8004efe:	469a      	mov	sl, r3
 8004f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f04:	b10a      	cbz	r2, 8004f0a <_vfiprintf_r+0x86>
 8004f06:	2a25      	cmp	r2, #37	@ 0x25
 8004f08:	d1f9      	bne.n	8004efe <_vfiprintf_r+0x7a>
 8004f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f0e:	d00b      	beq.n	8004f28 <_vfiprintf_r+0xa4>
 8004f10:	465b      	mov	r3, fp
 8004f12:	4622      	mov	r2, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffa1 	bl	8004e5e <__sfputs_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f000 80a7 	beq.w	8005070 <_vfiprintf_r+0x1ec>
 8004f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f24:	445a      	add	r2, fp
 8004f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f28:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 809f 	beq.w	8005070 <_vfiprintf_r+0x1ec>
 8004f32:	2300      	movs	r3, #0
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f3c:	f10a 0a01 	add.w	sl, sl, #1
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	9307      	str	r3, [sp, #28]
 8004f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f52:	4853      	ldr	r0, [pc, #332]	@ (80050a0 <_vfiprintf_r+0x21c>)
 8004f54:	f7fb f944 	bl	80001e0 <memchr>
 8004f58:	9a04      	ldr	r2, [sp, #16]
 8004f5a:	b9d8      	cbnz	r0, 8004f94 <_vfiprintf_r+0x110>
 8004f5c:	06d1      	lsls	r1, r2, #27
 8004f5e:	bf44      	itt	mi
 8004f60:	2320      	movmi	r3, #32
 8004f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f66:	0713      	lsls	r3, r2, #28
 8004f68:	bf44      	itt	mi
 8004f6a:	232b      	movmi	r3, #43	@ 0x2b
 8004f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f70:	f89a 3000 	ldrb.w	r3, [sl]
 8004f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f76:	d015      	beq.n	8004fa4 <_vfiprintf_r+0x120>
 8004f78:	9a07      	ldr	r2, [sp, #28]
 8004f7a:	4654      	mov	r4, sl
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f88:	3b30      	subs	r3, #48	@ 0x30
 8004f8a:	2b09      	cmp	r3, #9
 8004f8c:	d94b      	bls.n	8005026 <_vfiprintf_r+0x1a2>
 8004f8e:	b1b0      	cbz	r0, 8004fbe <_vfiprintf_r+0x13a>
 8004f90:	9207      	str	r2, [sp, #28]
 8004f92:	e014      	b.n	8004fbe <_vfiprintf_r+0x13a>
 8004f94:	eba0 0308 	sub.w	r3, r0, r8
 8004f98:	fa09 f303 	lsl.w	r3, r9, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	9304      	str	r3, [sp, #16]
 8004fa0:	46a2      	mov	sl, r4
 8004fa2:	e7d2      	b.n	8004f4a <_vfiprintf_r+0xc6>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	1d19      	adds	r1, r3, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	9103      	str	r1, [sp, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfbb      	ittet	lt
 8004fb0:	425b      	neglt	r3, r3
 8004fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb6:	9307      	strge	r3, [sp, #28]
 8004fb8:	9307      	strlt	r3, [sp, #28]
 8004fba:	bfb8      	it	lt
 8004fbc:	9204      	strlt	r2, [sp, #16]
 8004fbe:	7823      	ldrb	r3, [r4, #0]
 8004fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fc2:	d10a      	bne.n	8004fda <_vfiprintf_r+0x156>
 8004fc4:	7863      	ldrb	r3, [r4, #1]
 8004fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fc8:	d132      	bne.n	8005030 <_vfiprintf_r+0x1ac>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	1d1a      	adds	r2, r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	9203      	str	r2, [sp, #12]
 8004fd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fd6:	3402      	adds	r4, #2
 8004fd8:	9305      	str	r3, [sp, #20]
 8004fda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80050b0 <_vfiprintf_r+0x22c>
 8004fde:	7821      	ldrb	r1, [r4, #0]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7fb f8fc 	bl	80001e0 <memchr>
 8004fe8:	b138      	cbz	r0, 8004ffa <_vfiprintf_r+0x176>
 8004fea:	9b04      	ldr	r3, [sp, #16]
 8004fec:	eba0 000a 	sub.w	r0, r0, sl
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	4082      	lsls	r2, r0
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	3401      	adds	r4, #1
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffe:	4829      	ldr	r0, [pc, #164]	@ (80050a4 <_vfiprintf_r+0x220>)
 8005000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005004:	2206      	movs	r2, #6
 8005006:	f7fb f8eb 	bl	80001e0 <memchr>
 800500a:	2800      	cmp	r0, #0
 800500c:	d03f      	beq.n	800508e <_vfiprintf_r+0x20a>
 800500e:	4b26      	ldr	r3, [pc, #152]	@ (80050a8 <_vfiprintf_r+0x224>)
 8005010:	bb1b      	cbnz	r3, 800505a <_vfiprintf_r+0x1d6>
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	3307      	adds	r3, #7
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	3308      	adds	r3, #8
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005020:	443b      	add	r3, r7
 8005022:	9309      	str	r3, [sp, #36]	@ 0x24
 8005024:	e76a      	b.n	8004efc <_vfiprintf_r+0x78>
 8005026:	fb0c 3202 	mla	r2, ip, r2, r3
 800502a:	460c      	mov	r4, r1
 800502c:	2001      	movs	r0, #1
 800502e:	e7a8      	b.n	8004f82 <_vfiprintf_r+0xfe>
 8005030:	2300      	movs	r3, #0
 8005032:	3401      	adds	r4, #1
 8005034:	9305      	str	r3, [sp, #20]
 8005036:	4619      	mov	r1, r3
 8005038:	f04f 0c0a 	mov.w	ip, #10
 800503c:	4620      	mov	r0, r4
 800503e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005042:	3a30      	subs	r2, #48	@ 0x30
 8005044:	2a09      	cmp	r2, #9
 8005046:	d903      	bls.n	8005050 <_vfiprintf_r+0x1cc>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0c6      	beq.n	8004fda <_vfiprintf_r+0x156>
 800504c:	9105      	str	r1, [sp, #20]
 800504e:	e7c4      	b.n	8004fda <_vfiprintf_r+0x156>
 8005050:	fb0c 2101 	mla	r1, ip, r1, r2
 8005054:	4604      	mov	r4, r0
 8005056:	2301      	movs	r3, #1
 8005058:	e7f0      	b.n	800503c <_vfiprintf_r+0x1b8>
 800505a:	ab03      	add	r3, sp, #12
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	462a      	mov	r2, r5
 8005060:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <_vfiprintf_r+0x228>)
 8005062:	a904      	add	r1, sp, #16
 8005064:	4630      	mov	r0, r6
 8005066:	f3af 8000 	nop.w
 800506a:	4607      	mov	r7, r0
 800506c:	1c78      	adds	r0, r7, #1
 800506e:	d1d6      	bne.n	800501e <_vfiprintf_r+0x19a>
 8005070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005072:	07d9      	lsls	r1, r3, #31
 8005074:	d405      	bmi.n	8005082 <_vfiprintf_r+0x1fe>
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	059a      	lsls	r2, r3, #22
 800507a:	d402      	bmi.n	8005082 <_vfiprintf_r+0x1fe>
 800507c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800507e:	f7ff fdcf 	bl	8004c20 <__retarget_lock_release_recursive>
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	065b      	lsls	r3, r3, #25
 8005086:	f53f af1f 	bmi.w	8004ec8 <_vfiprintf_r+0x44>
 800508a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800508c:	e71e      	b.n	8004ecc <_vfiprintf_r+0x48>
 800508e:	ab03      	add	r3, sp, #12
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	462a      	mov	r2, r5
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <_vfiprintf_r+0x228>)
 8005096:	a904      	add	r1, sp, #16
 8005098:	4630      	mov	r0, r6
 800509a:	f000 f879 	bl	8005190 <_printf_i>
 800509e:	e7e4      	b.n	800506a <_vfiprintf_r+0x1e6>
 80050a0:	08005728 	.word	0x08005728
 80050a4:	08005732 	.word	0x08005732
 80050a8:	00000000 	.word	0x00000000
 80050ac:	08004e5f 	.word	0x08004e5f
 80050b0:	0800572e 	.word	0x0800572e

080050b4 <_printf_common>:
 80050b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	4616      	mov	r6, r2
 80050ba:	4698      	mov	r8, r3
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bfb8      	it	lt
 80050c8:	4613      	movlt	r3, r2
 80050ca:	6033      	str	r3, [r6, #0]
 80050cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050d0:	4607      	mov	r7, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	b10a      	cbz	r2, 80050da <_printf_common+0x26>
 80050d6:	3301      	adds	r3, #1
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	0699      	lsls	r1, r3, #26
 80050de:	bf42      	ittt	mi
 80050e0:	6833      	ldrmi	r3, [r6, #0]
 80050e2:	3302      	addmi	r3, #2
 80050e4:	6033      	strmi	r3, [r6, #0]
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	f015 0506 	ands.w	r5, r5, #6
 80050ec:	d106      	bne.n	80050fc <_printf_common+0x48>
 80050ee:	f104 0a19 	add.w	sl, r4, #25
 80050f2:	68e3      	ldr	r3, [r4, #12]
 80050f4:	6832      	ldr	r2, [r6, #0]
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dc26      	bgt.n	800514a <_printf_common+0x96>
 80050fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	3b00      	subs	r3, #0
 8005104:	bf18      	it	ne
 8005106:	2301      	movne	r3, #1
 8005108:	0692      	lsls	r2, r2, #26
 800510a:	d42b      	bmi.n	8005164 <_printf_common+0xb0>
 800510c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005110:	4641      	mov	r1, r8
 8005112:	4638      	mov	r0, r7
 8005114:	47c8      	blx	r9
 8005116:	3001      	adds	r0, #1
 8005118:	d01e      	beq.n	8005158 <_printf_common+0xa4>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	6922      	ldr	r2, [r4, #16]
 800511e:	f003 0306 	and.w	r3, r3, #6
 8005122:	2b04      	cmp	r3, #4
 8005124:	bf02      	ittt	eq
 8005126:	68e5      	ldreq	r5, [r4, #12]
 8005128:	6833      	ldreq	r3, [r6, #0]
 800512a:	1aed      	subeq	r5, r5, r3
 800512c:	68a3      	ldr	r3, [r4, #8]
 800512e:	bf0c      	ite	eq
 8005130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005134:	2500      	movne	r5, #0
 8005136:	4293      	cmp	r3, r2
 8005138:	bfc4      	itt	gt
 800513a:	1a9b      	subgt	r3, r3, r2
 800513c:	18ed      	addgt	r5, r5, r3
 800513e:	2600      	movs	r6, #0
 8005140:	341a      	adds	r4, #26
 8005142:	42b5      	cmp	r5, r6
 8005144:	d11a      	bne.n	800517c <_printf_common+0xc8>
 8005146:	2000      	movs	r0, #0
 8005148:	e008      	b.n	800515c <_printf_common+0xa8>
 800514a:	2301      	movs	r3, #1
 800514c:	4652      	mov	r2, sl
 800514e:	4641      	mov	r1, r8
 8005150:	4638      	mov	r0, r7
 8005152:	47c8      	blx	r9
 8005154:	3001      	adds	r0, #1
 8005156:	d103      	bne.n	8005160 <_printf_common+0xac>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	3501      	adds	r5, #1
 8005162:	e7c6      	b.n	80050f2 <_printf_common+0x3e>
 8005164:	18e1      	adds	r1, r4, r3
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	2030      	movs	r0, #48	@ 0x30
 800516a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800516e:	4422      	add	r2, r4
 8005170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005178:	3302      	adds	r3, #2
 800517a:	e7c7      	b.n	800510c <_printf_common+0x58>
 800517c:	2301      	movs	r3, #1
 800517e:	4622      	mov	r2, r4
 8005180:	4641      	mov	r1, r8
 8005182:	4638      	mov	r0, r7
 8005184:	47c8      	blx	r9
 8005186:	3001      	adds	r0, #1
 8005188:	d0e6      	beq.n	8005158 <_printf_common+0xa4>
 800518a:	3601      	adds	r6, #1
 800518c:	e7d9      	b.n	8005142 <_printf_common+0x8e>
	...

08005190 <_printf_i>:
 8005190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	7e0f      	ldrb	r7, [r1, #24]
 8005196:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005198:	2f78      	cmp	r7, #120	@ 0x78
 800519a:	4691      	mov	r9, r2
 800519c:	4680      	mov	r8, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	469a      	mov	sl, r3
 80051a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051a6:	d807      	bhi.n	80051b8 <_printf_i+0x28>
 80051a8:	2f62      	cmp	r7, #98	@ 0x62
 80051aa:	d80a      	bhi.n	80051c2 <_printf_i+0x32>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	f000 80d1 	beq.w	8005354 <_printf_i+0x1c4>
 80051b2:	2f58      	cmp	r7, #88	@ 0x58
 80051b4:	f000 80b8 	beq.w	8005328 <_printf_i+0x198>
 80051b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051c0:	e03a      	b.n	8005238 <_printf_i+0xa8>
 80051c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051c6:	2b15      	cmp	r3, #21
 80051c8:	d8f6      	bhi.n	80051b8 <_printf_i+0x28>
 80051ca:	a101      	add	r1, pc, #4	@ (adr r1, 80051d0 <_printf_i+0x40>)
 80051cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d0:	08005229 	.word	0x08005229
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	080051b9 	.word	0x080051b9
 80051dc:	080051b9 	.word	0x080051b9
 80051e0:	080051b9 	.word	0x080051b9
 80051e4:	080051b9 	.word	0x080051b9
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	080051b9 	.word	0x080051b9
 80051f0:	080051b9 	.word	0x080051b9
 80051f4:	080051b9 	.word	0x080051b9
 80051f8:	080051b9 	.word	0x080051b9
 80051fc:	0800533b 	.word	0x0800533b
 8005200:	08005267 	.word	0x08005267
 8005204:	080052f5 	.word	0x080052f5
 8005208:	080051b9 	.word	0x080051b9
 800520c:	080051b9 	.word	0x080051b9
 8005210:	0800535d 	.word	0x0800535d
 8005214:	080051b9 	.word	0x080051b9
 8005218:	08005267 	.word	0x08005267
 800521c:	080051b9 	.word	0x080051b9
 8005220:	080051b9 	.word	0x080051b9
 8005224:	080052fd 	.word	0x080052fd
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6032      	str	r2, [r6, #0]
 8005230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005238:	2301      	movs	r3, #1
 800523a:	e09c      	b.n	8005376 <_printf_i+0x1e6>
 800523c:	6833      	ldr	r3, [r6, #0]
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	1d19      	adds	r1, r3, #4
 8005242:	6031      	str	r1, [r6, #0]
 8005244:	0606      	lsls	r6, r0, #24
 8005246:	d501      	bpl.n	800524c <_printf_i+0xbc>
 8005248:	681d      	ldr	r5, [r3, #0]
 800524a:	e003      	b.n	8005254 <_printf_i+0xc4>
 800524c:	0645      	lsls	r5, r0, #25
 800524e:	d5fb      	bpl.n	8005248 <_printf_i+0xb8>
 8005250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005254:	2d00      	cmp	r5, #0
 8005256:	da03      	bge.n	8005260 <_printf_i+0xd0>
 8005258:	232d      	movs	r3, #45	@ 0x2d
 800525a:	426d      	negs	r5, r5
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005260:	4858      	ldr	r0, [pc, #352]	@ (80053c4 <_printf_i+0x234>)
 8005262:	230a      	movs	r3, #10
 8005264:	e011      	b.n	800528a <_printf_i+0xfa>
 8005266:	6821      	ldr	r1, [r4, #0]
 8005268:	6833      	ldr	r3, [r6, #0]
 800526a:	0608      	lsls	r0, r1, #24
 800526c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005270:	d402      	bmi.n	8005278 <_printf_i+0xe8>
 8005272:	0649      	lsls	r1, r1, #25
 8005274:	bf48      	it	mi
 8005276:	b2ad      	uxthmi	r5, r5
 8005278:	2f6f      	cmp	r7, #111	@ 0x6f
 800527a:	4852      	ldr	r0, [pc, #328]	@ (80053c4 <_printf_i+0x234>)
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	bf14      	ite	ne
 8005280:	230a      	movne	r3, #10
 8005282:	2308      	moveq	r3, #8
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800528a:	6866      	ldr	r6, [r4, #4]
 800528c:	60a6      	str	r6, [r4, #8]
 800528e:	2e00      	cmp	r6, #0
 8005290:	db05      	blt.n	800529e <_printf_i+0x10e>
 8005292:	6821      	ldr	r1, [r4, #0]
 8005294:	432e      	orrs	r6, r5
 8005296:	f021 0104 	bic.w	r1, r1, #4
 800529a:	6021      	str	r1, [r4, #0]
 800529c:	d04b      	beq.n	8005336 <_printf_i+0x1a6>
 800529e:	4616      	mov	r6, r2
 80052a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80052a4:	fb03 5711 	mls	r7, r3, r1, r5
 80052a8:	5dc7      	ldrb	r7, [r0, r7]
 80052aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ae:	462f      	mov	r7, r5
 80052b0:	42bb      	cmp	r3, r7
 80052b2:	460d      	mov	r5, r1
 80052b4:	d9f4      	bls.n	80052a0 <_printf_i+0x110>
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d10b      	bne.n	80052d2 <_printf_i+0x142>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	07df      	lsls	r7, r3, #31
 80052be:	d508      	bpl.n	80052d2 <_printf_i+0x142>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6861      	ldr	r1, [r4, #4]
 80052c4:	4299      	cmp	r1, r3
 80052c6:	bfde      	ittt	le
 80052c8:	2330      	movle	r3, #48	@ 0x30
 80052ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80052d2:	1b92      	subs	r2, r2, r6
 80052d4:	6122      	str	r2, [r4, #16]
 80052d6:	f8cd a000 	str.w	sl, [sp]
 80052da:	464b      	mov	r3, r9
 80052dc:	aa03      	add	r2, sp, #12
 80052de:	4621      	mov	r1, r4
 80052e0:	4640      	mov	r0, r8
 80052e2:	f7ff fee7 	bl	80050b4 <_printf_common>
 80052e6:	3001      	adds	r0, #1
 80052e8:	d14a      	bne.n	8005380 <_printf_i+0x1f0>
 80052ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052ee:	b004      	add	sp, #16
 80052f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f043 0320 	orr.w	r3, r3, #32
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	4832      	ldr	r0, [pc, #200]	@ (80053c8 <_printf_i+0x238>)
 80052fe:	2778      	movs	r7, #120	@ 0x78
 8005300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6831      	ldr	r1, [r6, #0]
 8005308:	061f      	lsls	r7, r3, #24
 800530a:	f851 5b04 	ldr.w	r5, [r1], #4
 800530e:	d402      	bmi.n	8005316 <_printf_i+0x186>
 8005310:	065f      	lsls	r7, r3, #25
 8005312:	bf48      	it	mi
 8005314:	b2ad      	uxthmi	r5, r5
 8005316:	6031      	str	r1, [r6, #0]
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	bf44      	itt	mi
 800531c:	f043 0320 	orrmi.w	r3, r3, #32
 8005320:	6023      	strmi	r3, [r4, #0]
 8005322:	b11d      	cbz	r5, 800532c <_printf_i+0x19c>
 8005324:	2310      	movs	r3, #16
 8005326:	e7ad      	b.n	8005284 <_printf_i+0xf4>
 8005328:	4826      	ldr	r0, [pc, #152]	@ (80053c4 <_printf_i+0x234>)
 800532a:	e7e9      	b.n	8005300 <_printf_i+0x170>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f023 0320 	bic.w	r3, r3, #32
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	e7f6      	b.n	8005324 <_printf_i+0x194>
 8005336:	4616      	mov	r6, r2
 8005338:	e7bd      	b.n	80052b6 <_printf_i+0x126>
 800533a:	6833      	ldr	r3, [r6, #0]
 800533c:	6825      	ldr	r5, [r4, #0]
 800533e:	6961      	ldr	r1, [r4, #20]
 8005340:	1d18      	adds	r0, r3, #4
 8005342:	6030      	str	r0, [r6, #0]
 8005344:	062e      	lsls	r6, r5, #24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	d501      	bpl.n	800534e <_printf_i+0x1be>
 800534a:	6019      	str	r1, [r3, #0]
 800534c:	e002      	b.n	8005354 <_printf_i+0x1c4>
 800534e:	0668      	lsls	r0, r5, #25
 8005350:	d5fb      	bpl.n	800534a <_printf_i+0x1ba>
 8005352:	8019      	strh	r1, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	4616      	mov	r6, r2
 800535a:	e7bc      	b.n	80052d6 <_printf_i+0x146>
 800535c:	6833      	ldr	r3, [r6, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	6032      	str	r2, [r6, #0]
 8005362:	681e      	ldr	r6, [r3, #0]
 8005364:	6862      	ldr	r2, [r4, #4]
 8005366:	2100      	movs	r1, #0
 8005368:	4630      	mov	r0, r6
 800536a:	f7fa ff39 	bl	80001e0 <memchr>
 800536e:	b108      	cbz	r0, 8005374 <_printf_i+0x1e4>
 8005370:	1b80      	subs	r0, r0, r6
 8005372:	6060      	str	r0, [r4, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2300      	movs	r3, #0
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800537e:	e7aa      	b.n	80052d6 <_printf_i+0x146>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	4632      	mov	r2, r6
 8005384:	4649      	mov	r1, r9
 8005386:	4640      	mov	r0, r8
 8005388:	47d0      	blx	sl
 800538a:	3001      	adds	r0, #1
 800538c:	d0ad      	beq.n	80052ea <_printf_i+0x15a>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	079b      	lsls	r3, r3, #30
 8005392:	d413      	bmi.n	80053bc <_printf_i+0x22c>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e7a6      	b.n	80052ee <_printf_i+0x15e>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4632      	mov	r2, r6
 80053a4:	4649      	mov	r1, r9
 80053a6:	4640      	mov	r0, r8
 80053a8:	47d0      	blx	sl
 80053aa:	3001      	adds	r0, #1
 80053ac:	d09d      	beq.n	80052ea <_printf_i+0x15a>
 80053ae:	3501      	adds	r5, #1
 80053b0:	68e3      	ldr	r3, [r4, #12]
 80053b2:	9903      	ldr	r1, [sp, #12]
 80053b4:	1a5b      	subs	r3, r3, r1
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	dcf2      	bgt.n	80053a0 <_printf_i+0x210>
 80053ba:	e7eb      	b.n	8005394 <_printf_i+0x204>
 80053bc:	2500      	movs	r5, #0
 80053be:	f104 0619 	add.w	r6, r4, #25
 80053c2:	e7f5      	b.n	80053b0 <_printf_i+0x220>
 80053c4:	08005739 	.word	0x08005739
 80053c8:	0800574a 	.word	0x0800574a

080053cc <__sflush_r>:
 80053cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	0716      	lsls	r6, r2, #28
 80053d6:	4605      	mov	r5, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	d454      	bmi.n	8005486 <__sflush_r+0xba>
 80053dc:	684b      	ldr	r3, [r1, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dc02      	bgt.n	80053e8 <__sflush_r+0x1c>
 80053e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd48      	ble.n	800547a <__sflush_r+0xae>
 80053e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	d045      	beq.n	800547a <__sflush_r+0xae>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053f4:	682f      	ldr	r7, [r5, #0]
 80053f6:	6a21      	ldr	r1, [r4, #32]
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	d030      	beq.n	800545e <__sflush_r+0x92>
 80053fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	0759      	lsls	r1, r3, #29
 8005402:	d505      	bpl.n	8005410 <__sflush_r+0x44>
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800540a:	b10b      	cbz	r3, 8005410 <__sflush_r+0x44>
 800540c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	4628      	mov	r0, r5
 8005418:	47b0      	blx	r6
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	d106      	bne.n	800542e <__sflush_r+0x62>
 8005420:	6829      	ldr	r1, [r5, #0]
 8005422:	291d      	cmp	r1, #29
 8005424:	d82b      	bhi.n	800547e <__sflush_r+0xb2>
 8005426:	4a2a      	ldr	r2, [pc, #168]	@ (80054d0 <__sflush_r+0x104>)
 8005428:	40ca      	lsrs	r2, r1
 800542a:	07d6      	lsls	r6, r2, #31
 800542c:	d527      	bpl.n	800547e <__sflush_r+0xb2>
 800542e:	2200      	movs	r2, #0
 8005430:	6062      	str	r2, [r4, #4]
 8005432:	04d9      	lsls	r1, r3, #19
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	6022      	str	r2, [r4, #0]
 8005438:	d504      	bpl.n	8005444 <__sflush_r+0x78>
 800543a:	1c42      	adds	r2, r0, #1
 800543c:	d101      	bne.n	8005442 <__sflush_r+0x76>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	b903      	cbnz	r3, 8005444 <__sflush_r+0x78>
 8005442:	6560      	str	r0, [r4, #84]	@ 0x54
 8005444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005446:	602f      	str	r7, [r5, #0]
 8005448:	b1b9      	cbz	r1, 800547a <__sflush_r+0xae>
 800544a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800544e:	4299      	cmp	r1, r3
 8005450:	d002      	beq.n	8005458 <__sflush_r+0x8c>
 8005452:	4628      	mov	r0, r5
 8005454:	f7ff fbf4 	bl	8004c40 <_free_r>
 8005458:	2300      	movs	r3, #0
 800545a:	6363      	str	r3, [r4, #52]	@ 0x34
 800545c:	e00d      	b.n	800547a <__sflush_r+0xae>
 800545e:	2301      	movs	r3, #1
 8005460:	4628      	mov	r0, r5
 8005462:	47b0      	blx	r6
 8005464:	4602      	mov	r2, r0
 8005466:	1c50      	adds	r0, r2, #1
 8005468:	d1c9      	bne.n	80053fe <__sflush_r+0x32>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0c6      	beq.n	80053fe <__sflush_r+0x32>
 8005470:	2b1d      	cmp	r3, #29
 8005472:	d001      	beq.n	8005478 <__sflush_r+0xac>
 8005474:	2b16      	cmp	r3, #22
 8005476:	d11e      	bne.n	80054b6 <__sflush_r+0xea>
 8005478:	602f      	str	r7, [r5, #0]
 800547a:	2000      	movs	r0, #0
 800547c:	e022      	b.n	80054c4 <__sflush_r+0xf8>
 800547e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005482:	b21b      	sxth	r3, r3
 8005484:	e01b      	b.n	80054be <__sflush_r+0xf2>
 8005486:	690f      	ldr	r7, [r1, #16]
 8005488:	2f00      	cmp	r7, #0
 800548a:	d0f6      	beq.n	800547a <__sflush_r+0xae>
 800548c:	0793      	lsls	r3, r2, #30
 800548e:	680e      	ldr	r6, [r1, #0]
 8005490:	bf08      	it	eq
 8005492:	694b      	ldreq	r3, [r1, #20]
 8005494:	600f      	str	r7, [r1, #0]
 8005496:	bf18      	it	ne
 8005498:	2300      	movne	r3, #0
 800549a:	eba6 0807 	sub.w	r8, r6, r7
 800549e:	608b      	str	r3, [r1, #8]
 80054a0:	f1b8 0f00 	cmp.w	r8, #0
 80054a4:	dde9      	ble.n	800547a <__sflush_r+0xae>
 80054a6:	6a21      	ldr	r1, [r4, #32]
 80054a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054aa:	4643      	mov	r3, r8
 80054ac:	463a      	mov	r2, r7
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b0      	blx	r6
 80054b2:	2800      	cmp	r0, #0
 80054b4:	dc08      	bgt.n	80054c8 <__sflush_r+0xfc>
 80054b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c8:	4407      	add	r7, r0
 80054ca:	eba8 0800 	sub.w	r8, r8, r0
 80054ce:	e7e7      	b.n	80054a0 <__sflush_r+0xd4>
 80054d0:	20400001 	.word	0x20400001

080054d4 <_fflush_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	690b      	ldr	r3, [r1, #16]
 80054d8:	4605      	mov	r5, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b913      	cbnz	r3, 80054e4 <_fflush_r+0x10>
 80054de:	2500      	movs	r5, #0
 80054e0:	4628      	mov	r0, r5
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	b118      	cbz	r0, 80054ee <_fflush_r+0x1a>
 80054e6:	6a03      	ldr	r3, [r0, #32]
 80054e8:	b90b      	cbnz	r3, 80054ee <_fflush_r+0x1a>
 80054ea:	f7ff f9a1 	bl	8004830 <__sinit>
 80054ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f3      	beq.n	80054de <_fflush_r+0xa>
 80054f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054f8:	07d0      	lsls	r0, r2, #31
 80054fa:	d404      	bmi.n	8005506 <_fflush_r+0x32>
 80054fc:	0599      	lsls	r1, r3, #22
 80054fe:	d402      	bmi.n	8005506 <_fflush_r+0x32>
 8005500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005502:	f7ff fb8c 	bl	8004c1e <__retarget_lock_acquire_recursive>
 8005506:	4628      	mov	r0, r5
 8005508:	4621      	mov	r1, r4
 800550a:	f7ff ff5f 	bl	80053cc <__sflush_r>
 800550e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005510:	07da      	lsls	r2, r3, #31
 8005512:	4605      	mov	r5, r0
 8005514:	d4e4      	bmi.n	80054e0 <_fflush_r+0xc>
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	059b      	lsls	r3, r3, #22
 800551a:	d4e1      	bmi.n	80054e0 <_fflush_r+0xc>
 800551c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800551e:	f7ff fb7f 	bl	8004c20 <__retarget_lock_release_recursive>
 8005522:	e7dd      	b.n	80054e0 <_fflush_r+0xc>

08005524 <__swhatbuf_r>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	460c      	mov	r4, r1
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	2900      	cmp	r1, #0
 800552e:	b096      	sub	sp, #88	@ 0x58
 8005530:	4615      	mov	r5, r2
 8005532:	461e      	mov	r6, r3
 8005534:	da0d      	bge.n	8005552 <__swhatbuf_r+0x2e>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	bf14      	ite	ne
 8005542:	2340      	movne	r3, #64	@ 0x40
 8005544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005548:	2000      	movs	r0, #0
 800554a:	6031      	str	r1, [r6, #0]
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	b016      	add	sp, #88	@ 0x58
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	466a      	mov	r2, sp
 8005554:	f000 f848 	bl	80055e8 <_fstat_r>
 8005558:	2800      	cmp	r0, #0
 800555a:	dbec      	blt.n	8005536 <__swhatbuf_r+0x12>
 800555c:	9901      	ldr	r1, [sp, #4]
 800555e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005566:	4259      	negs	r1, r3
 8005568:	4159      	adcs	r1, r3
 800556a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800556e:	e7eb      	b.n	8005548 <__swhatbuf_r+0x24>

08005570 <__smakebuf_r>:
 8005570:	898b      	ldrh	r3, [r1, #12]
 8005572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005574:	079d      	lsls	r5, r3, #30
 8005576:	4606      	mov	r6, r0
 8005578:	460c      	mov	r4, r1
 800557a:	d507      	bpl.n	800558c <__smakebuf_r+0x1c>
 800557c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	2301      	movs	r3, #1
 8005586:	6163      	str	r3, [r4, #20]
 8005588:	b003      	add	sp, #12
 800558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558c:	ab01      	add	r3, sp, #4
 800558e:	466a      	mov	r2, sp
 8005590:	f7ff ffc8 	bl	8005524 <__swhatbuf_r>
 8005594:	9f00      	ldr	r7, [sp, #0]
 8005596:	4605      	mov	r5, r0
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	f7ff fbbc 	bl	8004d18 <_malloc_r>
 80055a0:	b948      	cbnz	r0, 80055b6 <__smakebuf_r+0x46>
 80055a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a6:	059a      	lsls	r2, r3, #22
 80055a8:	d4ee      	bmi.n	8005588 <__smakebuf_r+0x18>
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	f043 0302 	orr.w	r3, r3, #2
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	e7e2      	b.n	800557c <__smakebuf_r+0xc>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	6020      	str	r0, [r4, #0]
 80055ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	9b01      	ldr	r3, [sp, #4]
 80055c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055c6:	b15b      	cbz	r3, 80055e0 <__smakebuf_r+0x70>
 80055c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 f81d 	bl	800560c <_isatty_r>
 80055d2:	b128      	cbz	r0, 80055e0 <__smakebuf_r+0x70>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	431d      	orrs	r5, r3
 80055e4:	81a5      	strh	r5, [r4, #12]
 80055e6:	e7cf      	b.n	8005588 <__smakebuf_r+0x18>

080055e8 <_fstat_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4d07      	ldr	r5, [pc, #28]	@ (8005608 <_fstat_r+0x20>)
 80055ec:	2300      	movs	r3, #0
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	f7fb fa24 	bl	8000a42 <_fstat>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d102      	bne.n	8005604 <_fstat_r+0x1c>
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	b103      	cbz	r3, 8005604 <_fstat_r+0x1c>
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	bd38      	pop	{r3, r4, r5, pc}
 8005606:	bf00      	nop
 8005608:	20004b70 	.word	0x20004b70

0800560c <_isatty_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d06      	ldr	r5, [pc, #24]	@ (8005628 <_isatty_r+0x1c>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb fa23 	bl	8000a62 <_isatty>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_isatty_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_isatty_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20004b70 	.word	0x20004b70

0800562c <_sbrk_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	@ (8005648 <_sbrk_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fb fa2c 	bl	8000a94 <_sbrk>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_sbrk_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_sbrk_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	20004b70 	.word	0x20004b70

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
